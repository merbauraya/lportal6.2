/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.idetronic.eprint.service.base;

import com.idetronic.eprint.model.Eprint;
import com.idetronic.eprint.service.EprintLocalService;
import com.idetronic.eprint.service.persistence.EprintFinder;
import com.idetronic.eprint.service.persistence.EprintPersistence;
import com.idetronic.eprint.service.persistence.EprintStaticContentPersistence;
import com.idetronic.eprint.service.persistence.EprintSubjectPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.liferay.portlet.asset.service.persistence.AssetEntryPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the eprint local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.idetronic.eprint.service.impl.EprintLocalServiceImpl}.
 * </p>
 *
 * @author Mazlan Mat
 * @see com.idetronic.eprint.service.impl.EprintLocalServiceImpl
 * @see com.idetronic.eprint.service.EprintLocalServiceUtil
 * @generated
 */
public abstract class EprintLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements EprintLocalService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.idetronic.eprint.service.EprintLocalServiceUtil} to access the eprint local service.
	 */

	/**
	 * Adds the eprint to the database. Also notifies the appropriate model listeners.
	 *
	 * @param eprint the eprint
	 * @return the eprint that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Eprint addEprint(Eprint eprint) throws SystemException {
		eprint.setNew(true);

		return eprintPersistence.update(eprint);
	}

	/**
	 * Creates a new eprint with the primary key. Does not add the eprint to the database.
	 *
	 * @param eprintId the primary key for the new eprint
	 * @return the new eprint
	 */
	@Override
	public Eprint createEprint(long eprintId) {
		return eprintPersistence.create(eprintId);
	}

	/**
	 * Deletes the eprint with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param eprintId the primary key of the eprint
	 * @return the eprint that was removed
	 * @throws PortalException if a eprint with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Eprint deleteEprint(long eprintId)
		throws PortalException, SystemException {
		return eprintPersistence.remove(eprintId);
	}

	/**
	 * Deletes the eprint from the database. Also notifies the appropriate model listeners.
	 *
	 * @param eprint the eprint
	 * @return the eprint that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Eprint deleteEprint(Eprint eprint) throws SystemException {
		return eprintPersistence.remove(eprint);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(Eprint.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return eprintPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.idetronic.eprint.model.impl.EprintModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return eprintPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.idetronic.eprint.model.impl.EprintModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return eprintPersistence.findWithDynamicQuery(dynamicQuery, start, end,
			orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return eprintPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return eprintPersistence.countWithDynamicQuery(dynamicQuery, projection);
	}

	@Override
	public Eprint fetchEprint(long eprintId) throws SystemException {
		return eprintPersistence.fetchByPrimaryKey(eprintId);
	}

	/**
	 * Returns the eprint with the primary key.
	 *
	 * @param eprintId the primary key of the eprint
	 * @return the eprint
	 * @throws PortalException if a eprint with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public Eprint getEprint(long eprintId)
		throws PortalException, SystemException {
		return eprintPersistence.findByPrimaryKey(eprintId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return eprintPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the eprints.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.idetronic.eprint.model.impl.EprintModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of eprints
	 * @param end the upper bound of the range of eprints (not inclusive)
	 * @return the range of eprints
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<Eprint> getEprints(int start, int end)
		throws SystemException {
		return eprintPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of eprints.
	 *
	 * @return the number of eprints
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getEprintsCount() throws SystemException {
		return eprintPersistence.countAll();
	}

	/**
	 * Updates the eprint in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param eprint the eprint
	 * @return the eprint that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Eprint updateEprint(Eprint eprint) throws SystemException {
		return eprintPersistence.update(eprint);
	}

	/**
	 * Returns the eprint local service.
	 *
	 * @return the eprint local service
	 */
	public com.idetronic.eprint.service.EprintLocalService getEprintLocalService() {
		return eprintLocalService;
	}

	/**
	 * Sets the eprint local service.
	 *
	 * @param eprintLocalService the eprint local service
	 */
	public void setEprintLocalService(
		com.idetronic.eprint.service.EprintLocalService eprintLocalService) {
		this.eprintLocalService = eprintLocalService;
	}

	/**
	 * Returns the eprint persistence.
	 *
	 * @return the eprint persistence
	 */
	public EprintPersistence getEprintPersistence() {
		return eprintPersistence;
	}

	/**
	 * Sets the eprint persistence.
	 *
	 * @param eprintPersistence the eprint persistence
	 */
	public void setEprintPersistence(EprintPersistence eprintPersistence) {
		this.eprintPersistence = eprintPersistence;
	}

	/**
	 * Returns the eprint finder.
	 *
	 * @return the eprint finder
	 */
	public EprintFinder getEprintFinder() {
		return eprintFinder;
	}

	/**
	 * Sets the eprint finder.
	 *
	 * @param eprintFinder the eprint finder
	 */
	public void setEprintFinder(EprintFinder eprintFinder) {
		this.eprintFinder = eprintFinder;
	}

	/**
	 * Returns the eprint static content local service.
	 *
	 * @return the eprint static content local service
	 */
	public com.idetronic.eprint.service.EprintStaticContentLocalService getEprintStaticContentLocalService() {
		return eprintStaticContentLocalService;
	}

	/**
	 * Sets the eprint static content local service.
	 *
	 * @param eprintStaticContentLocalService the eprint static content local service
	 */
	public void setEprintStaticContentLocalService(
		com.idetronic.eprint.service.EprintStaticContentLocalService eprintStaticContentLocalService) {
		this.eprintStaticContentLocalService = eprintStaticContentLocalService;
	}

	/**
	 * Returns the eprint static content persistence.
	 *
	 * @return the eprint static content persistence
	 */
	public EprintStaticContentPersistence getEprintStaticContentPersistence() {
		return eprintStaticContentPersistence;
	}

	/**
	 * Sets the eprint static content persistence.
	 *
	 * @param eprintStaticContentPersistence the eprint static content persistence
	 */
	public void setEprintStaticContentPersistence(
		EprintStaticContentPersistence eprintStaticContentPersistence) {
		this.eprintStaticContentPersistence = eprintStaticContentPersistence;
	}

	/**
	 * Returns the eprint subject local service.
	 *
	 * @return the eprint subject local service
	 */
	public com.idetronic.eprint.service.EprintSubjectLocalService getEprintSubjectLocalService() {
		return eprintSubjectLocalService;
	}

	/**
	 * Sets the eprint subject local service.
	 *
	 * @param eprintSubjectLocalService the eprint subject local service
	 */
	public void setEprintSubjectLocalService(
		com.idetronic.eprint.service.EprintSubjectLocalService eprintSubjectLocalService) {
		this.eprintSubjectLocalService = eprintSubjectLocalService;
	}

	/**
	 * Returns the eprint subject persistence.
	 *
	 * @return the eprint subject persistence
	 */
	public EprintSubjectPersistence getEprintSubjectPersistence() {
		return eprintSubjectPersistence;
	}

	/**
	 * Sets the eprint subject persistence.
	 *
	 * @param eprintSubjectPersistence the eprint subject persistence
	 */
	public void setEprintSubjectPersistence(
		EprintSubjectPersistence eprintSubjectPersistence) {
		this.eprintSubjectPersistence = eprintSubjectPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	/**
	 * Returns the asset entry local service.
	 *
	 * @return the asset entry local service
	 */
	public com.liferay.portlet.asset.service.AssetEntryLocalService getAssetEntryLocalService() {
		return assetEntryLocalService;
	}

	/**
	 * Sets the asset entry local service.
	 *
	 * @param assetEntryLocalService the asset entry local service
	 */
	public void setAssetEntryLocalService(
		com.liferay.portlet.asset.service.AssetEntryLocalService assetEntryLocalService) {
		this.assetEntryLocalService = assetEntryLocalService;
	}

	/**
	 * Returns the asset entry remote service.
	 *
	 * @return the asset entry remote service
	 */
	public com.liferay.portlet.asset.service.AssetEntryService getAssetEntryService() {
		return assetEntryService;
	}

	/**
	 * Sets the asset entry remote service.
	 *
	 * @param assetEntryService the asset entry remote service
	 */
	public void setAssetEntryService(
		com.liferay.portlet.asset.service.AssetEntryService assetEntryService) {
		this.assetEntryService = assetEntryService;
	}

	/**
	 * Returns the asset entry persistence.
	 *
	 * @return the asset entry persistence
	 */
	public AssetEntryPersistence getAssetEntryPersistence() {
		return assetEntryPersistence;
	}

	/**
	 * Sets the asset entry persistence.
	 *
	 * @param assetEntryPersistence the asset entry persistence
	 */
	public void setAssetEntryPersistence(
		AssetEntryPersistence assetEntryPersistence) {
		this.assetEntryPersistence = assetEntryPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.idetronic.eprint.model.Eprint",
			eprintLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.idetronic.eprint.model.Eprint");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return Eprint.class;
	}

	protected String getModelClassName() {
		return Eprint.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = eprintPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.idetronic.eprint.service.EprintLocalService.class)
	protected com.idetronic.eprint.service.EprintLocalService eprintLocalService;
	@BeanReference(type = EprintPersistence.class)
	protected EprintPersistence eprintPersistence;
	@BeanReference(type = EprintFinder.class)
	protected EprintFinder eprintFinder;
	@BeanReference(type = com.idetronic.eprint.service.EprintStaticContentLocalService.class)
	protected com.idetronic.eprint.service.EprintStaticContentLocalService eprintStaticContentLocalService;
	@BeanReference(type = EprintStaticContentPersistence.class)
	protected EprintStaticContentPersistence eprintStaticContentPersistence;
	@BeanReference(type = com.idetronic.eprint.service.EprintSubjectLocalService.class)
	protected com.idetronic.eprint.service.EprintSubjectLocalService eprintSubjectLocalService;
	@BeanReference(type = EprintSubjectPersistence.class)
	protected EprintSubjectPersistence eprintSubjectPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@BeanReference(type = com.liferay.portlet.asset.service.AssetEntryLocalService.class)
	protected com.liferay.portlet.asset.service.AssetEntryLocalService assetEntryLocalService;
	@BeanReference(type = com.liferay.portlet.asset.service.AssetEntryService.class)
	protected com.liferay.portlet.asset.service.AssetEntryService assetEntryService;
	@BeanReference(type = AssetEntryPersistence.class)
	protected AssetEntryPersistence assetEntryPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private EprintLocalServiceClpInvoker _clpInvoker = new EprintLocalServiceClpInvoker();
}