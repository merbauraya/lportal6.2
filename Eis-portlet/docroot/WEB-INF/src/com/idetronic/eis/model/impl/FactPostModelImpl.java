/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.idetronic.eis.model.impl;

import com.idetronic.eis.model.FactPost;
import com.idetronic.eis.model.FactPostModel;
import com.idetronic.eis.model.FactPostSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the FactPost service. Represents a row in the &quot;eis_FactPost&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.idetronic.eis.model.FactPostModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FactPostImpl}.
 * </p>
 *
 * @author Mazlan Mat
 * @see FactPostImpl
 * @see com.idetronic.eis.model.FactPost
 * @see com.idetronic.eis.model.FactPostModel
 * @generated
 */
@JSON(strict = true)
public class FactPostModelImpl extends BaseModelImpl<FactPost>
	implements FactPostModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a fact post model instance should use the {@link com.idetronic.eis.model.FactPost} interface instead.
	 */
	public static final String TABLE_NAME = "eis_FactPost";
	public static final Object[][] TABLE_COLUMNS = {
			{ "factPostId", Types.BIGINT },
			{ "libraryId", Types.BIGINT },
			{ "period", Types.VARCHAR },
			{ "postGradeId", Types.BIGINT },
			{ "stateId", Types.BIGINT },
			{ "value", Types.INTEGER },
			{ "createdByUserId", Types.BIGINT },
			{ "createdByUserName", Types.VARCHAR },
			{ "createdDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table eis_FactPost (factPostId LONG not null primary key,libraryId LONG,period VARCHAR(10) null,postGradeId LONG,stateId LONG,value INTEGER,createdByUserId LONG,createdByUserName VARCHAR(75) null,createdDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table eis_FactPost";
	public static final String ORDER_BY_JPQL = " ORDER BY factPost.factPostId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY eis_FactPost.factPostId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.idetronic.eis.model.FactPost"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.idetronic.eis.model.FactPost"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.idetronic.eis.model.FactPost"),
			true);
	public static long LIBRARYID_COLUMN_BITMASK = 1L;
	public static long PERIOD_COLUMN_BITMASK = 2L;
	public static long POSTGRADEID_COLUMN_BITMASK = 4L;
	public static long FACTPOSTID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static FactPost toModel(FactPostSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		FactPost model = new FactPostImpl();

		model.setFactPostId(soapModel.getFactPostId());
		model.setLibraryId(soapModel.getLibraryId());
		model.setPeriod(soapModel.getPeriod());
		model.setPostGradeId(soapModel.getPostGradeId());
		model.setStateId(soapModel.getStateId());
		model.setValue(soapModel.getValue());
		model.setCreatedByUserId(soapModel.getCreatedByUserId());
		model.setCreatedByUserName(soapModel.getCreatedByUserName());
		model.setCreatedDate(soapModel.getCreatedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<FactPost> toModels(FactPostSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<FactPost> models = new ArrayList<FactPost>(soapModels.length);

		for (FactPostSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.idetronic.eis.model.FactPost"));

	public FactPostModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _factPostId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFactPostId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _factPostId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FactPost.class;
	}

	@Override
	public String getModelClassName() {
		return FactPost.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("factPostId", getFactPostId());
		attributes.put("libraryId", getLibraryId());
		attributes.put("period", getPeriod());
		attributes.put("postGradeId", getPostGradeId());
		attributes.put("stateId", getStateId());
		attributes.put("value", getValue());
		attributes.put("createdByUserId", getCreatedByUserId());
		attributes.put("createdByUserName", getCreatedByUserName());
		attributes.put("createdDate", getCreatedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long factPostId = (Long)attributes.get("factPostId");

		if (factPostId != null) {
			setFactPostId(factPostId);
		}

		Long libraryId = (Long)attributes.get("libraryId");

		if (libraryId != null) {
			setLibraryId(libraryId);
		}

		String period = (String)attributes.get("period");

		if (period != null) {
			setPeriod(period);
		}

		Long postGradeId = (Long)attributes.get("postGradeId");

		if (postGradeId != null) {
			setPostGradeId(postGradeId);
		}

		Long stateId = (Long)attributes.get("stateId");

		if (stateId != null) {
			setStateId(stateId);
		}

		Integer value = (Integer)attributes.get("value");

		if (value != null) {
			setValue(value);
		}

		Long createdByUserId = (Long)attributes.get("createdByUserId");

		if (createdByUserId != null) {
			setCreatedByUserId(createdByUserId);
		}

		String createdByUserName = (String)attributes.get("createdByUserName");

		if (createdByUserName != null) {
			setCreatedByUserName(createdByUserName);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}
	}

	@JSON
	@Override
	public long getFactPostId() {
		return _factPostId;
	}

	@Override
	public void setFactPostId(long factPostId) {
		_factPostId = factPostId;
	}

	@JSON
	@Override
	public long getLibraryId() {
		return _libraryId;
	}

	@Override
	public void setLibraryId(long libraryId) {
		_columnBitmask |= LIBRARYID_COLUMN_BITMASK;

		if (!_setOriginalLibraryId) {
			_setOriginalLibraryId = true;

			_originalLibraryId = _libraryId;
		}

		_libraryId = libraryId;
	}

	public long getOriginalLibraryId() {
		return _originalLibraryId;
	}

	@JSON
	@Override
	public String getPeriod() {
		if (_period == null) {
			return StringPool.BLANK;
		}
		else {
			return _period;
		}
	}

	@Override
	public void setPeriod(String period) {
		_columnBitmask |= PERIOD_COLUMN_BITMASK;

		if (_originalPeriod == null) {
			_originalPeriod = _period;
		}

		_period = period;
	}

	public String getOriginalPeriod() {
		return GetterUtil.getString(_originalPeriod);
	}

	@JSON
	@Override
	public long getPostGradeId() {
		return _postGradeId;
	}

	@Override
	public void setPostGradeId(long postGradeId) {
		_columnBitmask |= POSTGRADEID_COLUMN_BITMASK;

		if (!_setOriginalPostGradeId) {
			_setOriginalPostGradeId = true;

			_originalPostGradeId = _postGradeId;
		}

		_postGradeId = postGradeId;
	}

	public long getOriginalPostGradeId() {
		return _originalPostGradeId;
	}

	@JSON
	@Override
	public long getStateId() {
		return _stateId;
	}

	@Override
	public void setStateId(long stateId) {
		_stateId = stateId;
	}

	@JSON
	@Override
	public int getValue() {
		return _value;
	}

	@Override
	public void setValue(int value) {
		_value = value;
	}

	@JSON
	@Override
	public long getCreatedByUserId() {
		return _createdByUserId;
	}

	@Override
	public void setCreatedByUserId(long createdByUserId) {
		_createdByUserId = createdByUserId;
	}

	@Override
	public String getCreatedByUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getCreatedByUserId(), "uuid",
			_createdByUserUuid);
	}

	@Override
	public void setCreatedByUserUuid(String createdByUserUuid) {
		_createdByUserUuid = createdByUserUuid;
	}

	@JSON
	@Override
	public String getCreatedByUserName() {
		if (_createdByUserName == null) {
			return StringPool.BLANK;
		}
		else {
			return _createdByUserName;
		}
	}

	@Override
	public void setCreatedByUserName(String createdByUserName) {
		_createdByUserName = createdByUserName;
	}

	@JSON
	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			FactPost.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FactPost toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (FactPost)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FactPostImpl factPostImpl = new FactPostImpl();

		factPostImpl.setFactPostId(getFactPostId());
		factPostImpl.setLibraryId(getLibraryId());
		factPostImpl.setPeriod(getPeriod());
		factPostImpl.setPostGradeId(getPostGradeId());
		factPostImpl.setStateId(getStateId());
		factPostImpl.setValue(getValue());
		factPostImpl.setCreatedByUserId(getCreatedByUserId());
		factPostImpl.setCreatedByUserName(getCreatedByUserName());
		factPostImpl.setCreatedDate(getCreatedDate());

		factPostImpl.resetOriginalValues();

		return factPostImpl;
	}

	@Override
	public int compareTo(FactPost factPost) {
		long primaryKey = factPost.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof FactPost)) {
			return false;
		}

		FactPost factPost = (FactPost)obj;

		long primaryKey = factPost.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		FactPostModelImpl factPostModelImpl = this;

		factPostModelImpl._originalLibraryId = factPostModelImpl._libraryId;

		factPostModelImpl._setOriginalLibraryId = false;

		factPostModelImpl._originalPeriod = factPostModelImpl._period;

		factPostModelImpl._originalPostGradeId = factPostModelImpl._postGradeId;

		factPostModelImpl._setOriginalPostGradeId = false;

		factPostModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<FactPost> toCacheModel() {
		FactPostCacheModel factPostCacheModel = new FactPostCacheModel();

		factPostCacheModel.factPostId = getFactPostId();

		factPostCacheModel.libraryId = getLibraryId();

		factPostCacheModel.period = getPeriod();

		String period = factPostCacheModel.period;

		if ((period != null) && (period.length() == 0)) {
			factPostCacheModel.period = null;
		}

		factPostCacheModel.postGradeId = getPostGradeId();

		factPostCacheModel.stateId = getStateId();

		factPostCacheModel.value = getValue();

		factPostCacheModel.createdByUserId = getCreatedByUserId();

		factPostCacheModel.createdByUserName = getCreatedByUserName();

		String createdByUserName = factPostCacheModel.createdByUserName;

		if ((createdByUserName != null) && (createdByUserName.length() == 0)) {
			factPostCacheModel.createdByUserName = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			factPostCacheModel.createdDate = createdDate.getTime();
		}
		else {
			factPostCacheModel.createdDate = Long.MIN_VALUE;
		}

		return factPostCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{factPostId=");
		sb.append(getFactPostId());
		sb.append(", libraryId=");
		sb.append(getLibraryId());
		sb.append(", period=");
		sb.append(getPeriod());
		sb.append(", postGradeId=");
		sb.append(getPostGradeId());
		sb.append(", stateId=");
		sb.append(getStateId());
		sb.append(", value=");
		sb.append(getValue());
		sb.append(", createdByUserId=");
		sb.append(getCreatedByUserId());
		sb.append(", createdByUserName=");
		sb.append(getCreatedByUserName());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("com.idetronic.eis.model.FactPost");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>factPostId</column-name><column-value><![CDATA[");
		sb.append(getFactPostId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>libraryId</column-name><column-value><![CDATA[");
		sb.append(getLibraryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>period</column-name><column-value><![CDATA[");
		sb.append(getPeriod());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>postGradeId</column-name><column-value><![CDATA[");
		sb.append(getPostGradeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stateId</column-name><column-value><![CDATA[");
		sb.append(getStateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>value</column-name><column-value><![CDATA[");
		sb.append(getValue());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdByUserId</column-name><column-value><![CDATA[");
		sb.append(getCreatedByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdByUserName</column-name><column-value><![CDATA[");
		sb.append(getCreatedByUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = FactPost.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			FactPost.class
		};
	private long _factPostId;
	private long _libraryId;
	private long _originalLibraryId;
	private boolean _setOriginalLibraryId;
	private String _period;
	private String _originalPeriod;
	private long _postGradeId;
	private long _originalPostGradeId;
	private boolean _setOriginalPostGradeId;
	private long _stateId;
	private int _value;
	private long _createdByUserId;
	private String _createdByUserUuid;
	private String _createdByUserName;
	private Date _createdDate;
	private long _columnBitmask;
	private FactPost _escapedModel;
}