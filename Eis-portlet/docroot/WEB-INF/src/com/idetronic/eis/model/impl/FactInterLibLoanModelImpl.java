/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.idetronic.eis.model.impl;

import com.idetronic.eis.model.FactInterLibLoan;
import com.idetronic.eis.model.FactInterLibLoanModel;
import com.idetronic.eis.model.FactInterLibLoanSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the FactInterLibLoan service. Represents a row in the &quot;eis_FactInterLibLoan&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.idetronic.eis.model.FactInterLibLoanModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FactInterLibLoanImpl}.
 * </p>
 *
 * @author Mazlan Mat
 * @see FactInterLibLoanImpl
 * @see com.idetronic.eis.model.FactInterLibLoan
 * @see com.idetronic.eis.model.FactInterLibLoanModel
 * @generated
 */
@JSON(strict = true)
public class FactInterLibLoanModelImpl extends BaseModelImpl<FactInterLibLoan>
	implements FactInterLibLoanModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a fact inter lib loan model instance should use the {@link com.idetronic.eis.model.FactInterLibLoan} interface instead.
	 */
	public static final String TABLE_NAME = "eis_FactInterLibLoan";
	public static final Object[][] TABLE_COLUMNS = {
			{ "factId", Types.BIGINT },
			{ "libraryId", Types.BIGINT },
			{ "period", Types.VARCHAR },
			{ "ptjId", Types.BIGINT },
			{ "applyTotal", Types.BIGINT },
			{ "approvedTotal", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table eis_FactInterLibLoan (factId LONG not null primary key,libraryId LONG,period VARCHAR(75) null,ptjId LONG,applyTotal LONG,approvedTotal LONG,companyId LONG,groupId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table eis_FactInterLibLoan";
	public static final String ORDER_BY_JPQL = " ORDER BY factInterLibLoan.factId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY eis_FactInterLibLoan.factId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.idetronic.eis.model.FactInterLibLoan"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.idetronic.eis.model.FactInterLibLoan"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static FactInterLibLoan toModel(FactInterLibLoanSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		FactInterLibLoan model = new FactInterLibLoanImpl();

		model.setFactId(soapModel.getFactId());
		model.setLibraryId(soapModel.getLibraryId());
		model.setPeriod(soapModel.getPeriod());
		model.setPtjId(soapModel.getPtjId());
		model.setApplyTotal(soapModel.getApplyTotal());
		model.setApprovedTotal(soapModel.getApprovedTotal());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<FactInterLibLoan> toModels(
		FactInterLibLoanSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<FactInterLibLoan> models = new ArrayList<FactInterLibLoan>(soapModels.length);

		for (FactInterLibLoanSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.idetronic.eis.model.FactInterLibLoan"));

	public FactInterLibLoanModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _factId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFactId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _factId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FactInterLibLoan.class;
	}

	@Override
	public String getModelClassName() {
		return FactInterLibLoan.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("factId", getFactId());
		attributes.put("libraryId", getLibraryId());
		attributes.put("period", getPeriod());
		attributes.put("ptjId", getPtjId());
		attributes.put("applyTotal", getApplyTotal());
		attributes.put("approvedTotal", getApprovedTotal());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long factId = (Long)attributes.get("factId");

		if (factId != null) {
			setFactId(factId);
		}

		Long libraryId = (Long)attributes.get("libraryId");

		if (libraryId != null) {
			setLibraryId(libraryId);
		}

		String period = (String)attributes.get("period");

		if (period != null) {
			setPeriod(period);
		}

		Long ptjId = (Long)attributes.get("ptjId");

		if (ptjId != null) {
			setPtjId(ptjId);
		}

		Long applyTotal = (Long)attributes.get("applyTotal");

		if (applyTotal != null) {
			setApplyTotal(applyTotal);
		}

		Long approvedTotal = (Long)attributes.get("approvedTotal");

		if (approvedTotal != null) {
			setApprovedTotal(approvedTotal);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}
	}

	@JSON
	@Override
	public long getFactId() {
		return _factId;
	}

	@Override
	public void setFactId(long factId) {
		_factId = factId;
	}

	@JSON
	@Override
	public long getLibraryId() {
		return _libraryId;
	}

	@Override
	public void setLibraryId(long libraryId) {
		_libraryId = libraryId;
	}

	@JSON
	@Override
	public String getPeriod() {
		if (_period == null) {
			return StringPool.BLANK;
		}
		else {
			return _period;
		}
	}

	@Override
	public void setPeriod(String period) {
		_period = period;
	}

	@JSON
	@Override
	public long getPtjId() {
		return _ptjId;
	}

	@Override
	public void setPtjId(long ptjId) {
		_ptjId = ptjId;
	}

	@JSON
	@Override
	public long getApplyTotal() {
		return _applyTotal;
	}

	@Override
	public void setApplyTotal(long applyTotal) {
		_applyTotal = applyTotal;
	}

	@JSON
	@Override
	public long getApprovedTotal() {
		return _approvedTotal;
	}

	@Override
	public void setApprovedTotal(long approvedTotal) {
		_approvedTotal = approvedTotal;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			FactInterLibLoan.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FactInterLibLoan toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (FactInterLibLoan)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FactInterLibLoanImpl factInterLibLoanImpl = new FactInterLibLoanImpl();

		factInterLibLoanImpl.setFactId(getFactId());
		factInterLibLoanImpl.setLibraryId(getLibraryId());
		factInterLibLoanImpl.setPeriod(getPeriod());
		factInterLibLoanImpl.setPtjId(getPtjId());
		factInterLibLoanImpl.setApplyTotal(getApplyTotal());
		factInterLibLoanImpl.setApprovedTotal(getApprovedTotal());
		factInterLibLoanImpl.setCompanyId(getCompanyId());
		factInterLibLoanImpl.setGroupId(getGroupId());
		factInterLibLoanImpl.setUserId(getUserId());
		factInterLibLoanImpl.setUserName(getUserName());
		factInterLibLoanImpl.setCreateDate(getCreateDate());

		factInterLibLoanImpl.resetOriginalValues();

		return factInterLibLoanImpl;
	}

	@Override
	public int compareTo(FactInterLibLoan factInterLibLoan) {
		long primaryKey = factInterLibLoan.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof FactInterLibLoan)) {
			return false;
		}

		FactInterLibLoan factInterLibLoan = (FactInterLibLoan)obj;

		long primaryKey = factInterLibLoan.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<FactInterLibLoan> toCacheModel() {
		FactInterLibLoanCacheModel factInterLibLoanCacheModel = new FactInterLibLoanCacheModel();

		factInterLibLoanCacheModel.factId = getFactId();

		factInterLibLoanCacheModel.libraryId = getLibraryId();

		factInterLibLoanCacheModel.period = getPeriod();

		String period = factInterLibLoanCacheModel.period;

		if ((period != null) && (period.length() == 0)) {
			factInterLibLoanCacheModel.period = null;
		}

		factInterLibLoanCacheModel.ptjId = getPtjId();

		factInterLibLoanCacheModel.applyTotal = getApplyTotal();

		factInterLibLoanCacheModel.approvedTotal = getApprovedTotal();

		factInterLibLoanCacheModel.companyId = getCompanyId();

		factInterLibLoanCacheModel.groupId = getGroupId();

		factInterLibLoanCacheModel.userId = getUserId();

		factInterLibLoanCacheModel.userName = getUserName();

		String userName = factInterLibLoanCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			factInterLibLoanCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			factInterLibLoanCacheModel.createDate = createDate.getTime();
		}
		else {
			factInterLibLoanCacheModel.createDate = Long.MIN_VALUE;
		}

		return factInterLibLoanCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{factId=");
		sb.append(getFactId());
		sb.append(", libraryId=");
		sb.append(getLibraryId());
		sb.append(", period=");
		sb.append(getPeriod());
		sb.append(", ptjId=");
		sb.append(getPtjId());
		sb.append(", applyTotal=");
		sb.append(getApplyTotal());
		sb.append(", approvedTotal=");
		sb.append(getApprovedTotal());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("com.idetronic.eis.model.FactInterLibLoan");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>factId</column-name><column-value><![CDATA[");
		sb.append(getFactId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>libraryId</column-name><column-value><![CDATA[");
		sb.append(getLibraryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>period</column-name><column-value><![CDATA[");
		sb.append(getPeriod());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ptjId</column-name><column-value><![CDATA[");
		sb.append(getPtjId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applyTotal</column-name><column-value><![CDATA[");
		sb.append(getApplyTotal());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>approvedTotal</column-name><column-value><![CDATA[");
		sb.append(getApprovedTotal());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = FactInterLibLoan.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			FactInterLibLoan.class
		};
	private long _factId;
	private long _libraryId;
	private String _period;
	private long _ptjId;
	private long _applyTotal;
	private long _approvedTotal;
	private long _companyId;
	private long _groupId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private FactInterLibLoan _escapedModel;
}