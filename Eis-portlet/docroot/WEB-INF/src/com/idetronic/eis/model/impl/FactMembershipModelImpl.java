/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.idetronic.eis.model.impl;

import com.idetronic.eis.model.FactMembership;
import com.idetronic.eis.model.FactMembershipModel;
import com.idetronic.eis.model.FactMembershipSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the FactMembership service. Represents a row in the &quot;eis_FactMembership&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.idetronic.eis.model.FactMembershipModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FactMembershipImpl}.
 * </p>
 *
 * @author Mazlan Mat
 * @see FactMembershipImpl
 * @see com.idetronic.eis.model.FactMembership
 * @see com.idetronic.eis.model.FactMembershipModel
 * @generated
 */
@JSON(strict = true)
public class FactMembershipModelImpl extends BaseModelImpl<FactMembership>
	implements FactMembershipModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a fact membership model instance should use the {@link com.idetronic.eis.model.FactMembership} interface instead.
	 */
	public static final String TABLE_NAME = "eis_FactMembership";
	public static final Object[][] TABLE_COLUMNS = {
			{ "factMembershipId", Types.BIGINT },
			{ "libraryId", Types.BIGINT },
			{ "period", Types.VARCHAR },
			{ "stateId", Types.BIGINT },
			{ "libraryTypeId", Types.BIGINT },
			{ "membershipCategoryId", Types.BIGINT },
			{ "activeCount", Types.INTEGER },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table eis_FactMembership (factMembershipId LONG not null primary key,libraryId LONG,period VARCHAR(75) null,stateId LONG,libraryTypeId LONG,membershipCategoryId LONG,activeCount INTEGER,companyId LONG,groupId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table eis_FactMembership";
	public static final String ORDER_BY_JPQL = " ORDER BY factMembership.factMembershipId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY eis_FactMembership.factMembershipId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.idetronic.eis.model.FactMembership"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.idetronic.eis.model.FactMembership"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.idetronic.eis.model.FactMembership"),
			true);
	public static long LIBRARYID_COLUMN_BITMASK = 1L;
	public static long PERIOD_COLUMN_BITMASK = 2L;
	public static long FACTMEMBERSHIPID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static FactMembership toModel(FactMembershipSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		FactMembership model = new FactMembershipImpl();

		model.setFactMembershipId(soapModel.getFactMembershipId());
		model.setLibraryId(soapModel.getLibraryId());
		model.setPeriod(soapModel.getPeriod());
		model.setStateId(soapModel.getStateId());
		model.setLibraryTypeId(soapModel.getLibraryTypeId());
		model.setMembershipCategoryId(soapModel.getMembershipCategoryId());
		model.setActiveCount(soapModel.getActiveCount());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<FactMembership> toModels(FactMembershipSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<FactMembership> models = new ArrayList<FactMembership>(soapModels.length);

		for (FactMembershipSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.idetronic.eis.model.FactMembership"));

	public FactMembershipModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _factMembershipId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFactMembershipId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _factMembershipId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FactMembership.class;
	}

	@Override
	public String getModelClassName() {
		return FactMembership.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("factMembershipId", getFactMembershipId());
		attributes.put("libraryId", getLibraryId());
		attributes.put("period", getPeriod());
		attributes.put("stateId", getStateId());
		attributes.put("libraryTypeId", getLibraryTypeId());
		attributes.put("membershipCategoryId", getMembershipCategoryId());
		attributes.put("activeCount", getActiveCount());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long factMembershipId = (Long)attributes.get("factMembershipId");

		if (factMembershipId != null) {
			setFactMembershipId(factMembershipId);
		}

		Long libraryId = (Long)attributes.get("libraryId");

		if (libraryId != null) {
			setLibraryId(libraryId);
		}

		String period = (String)attributes.get("period");

		if (period != null) {
			setPeriod(period);
		}

		Long stateId = (Long)attributes.get("stateId");

		if (stateId != null) {
			setStateId(stateId);
		}

		Long libraryTypeId = (Long)attributes.get("libraryTypeId");

		if (libraryTypeId != null) {
			setLibraryTypeId(libraryTypeId);
		}

		Long membershipCategoryId = (Long)attributes.get("membershipCategoryId");

		if (membershipCategoryId != null) {
			setMembershipCategoryId(membershipCategoryId);
		}

		Integer activeCount = (Integer)attributes.get("activeCount");

		if (activeCount != null) {
			setActiveCount(activeCount);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}
	}

	@JSON
	@Override
	public long getFactMembershipId() {
		return _factMembershipId;
	}

	@Override
	public void setFactMembershipId(long factMembershipId) {
		_factMembershipId = factMembershipId;
	}

	@JSON
	@Override
	public long getLibraryId() {
		return _libraryId;
	}

	@Override
	public void setLibraryId(long libraryId) {
		_columnBitmask |= LIBRARYID_COLUMN_BITMASK;

		if (!_setOriginalLibraryId) {
			_setOriginalLibraryId = true;

			_originalLibraryId = _libraryId;
		}

		_libraryId = libraryId;
	}

	public long getOriginalLibraryId() {
		return _originalLibraryId;
	}

	@JSON
	@Override
	public String getPeriod() {
		if (_period == null) {
			return StringPool.BLANK;
		}
		else {
			return _period;
		}
	}

	@Override
	public void setPeriod(String period) {
		_columnBitmask |= PERIOD_COLUMN_BITMASK;

		if (_originalPeriod == null) {
			_originalPeriod = _period;
		}

		_period = period;
	}

	public String getOriginalPeriod() {
		return GetterUtil.getString(_originalPeriod);
	}

	@JSON
	@Override
	public long getStateId() {
		return _stateId;
	}

	@Override
	public void setStateId(long stateId) {
		_stateId = stateId;
	}

	@JSON
	@Override
	public long getLibraryTypeId() {
		return _libraryTypeId;
	}

	@Override
	public void setLibraryTypeId(long libraryTypeId) {
		_libraryTypeId = libraryTypeId;
	}

	@JSON
	@Override
	public long getMembershipCategoryId() {
		return _membershipCategoryId;
	}

	@Override
	public void setMembershipCategoryId(long membershipCategoryId) {
		_membershipCategoryId = membershipCategoryId;
	}

	@JSON
	@Override
	public int getActiveCount() {
		return _activeCount;
	}

	@Override
	public void setActiveCount(int activeCount) {
		_activeCount = activeCount;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			FactMembership.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FactMembership toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (FactMembership)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FactMembershipImpl factMembershipImpl = new FactMembershipImpl();

		factMembershipImpl.setFactMembershipId(getFactMembershipId());
		factMembershipImpl.setLibraryId(getLibraryId());
		factMembershipImpl.setPeriod(getPeriod());
		factMembershipImpl.setStateId(getStateId());
		factMembershipImpl.setLibraryTypeId(getLibraryTypeId());
		factMembershipImpl.setMembershipCategoryId(getMembershipCategoryId());
		factMembershipImpl.setActiveCount(getActiveCount());
		factMembershipImpl.setCompanyId(getCompanyId());
		factMembershipImpl.setGroupId(getGroupId());
		factMembershipImpl.setUserId(getUserId());
		factMembershipImpl.setUserName(getUserName());
		factMembershipImpl.setCreateDate(getCreateDate());

		factMembershipImpl.resetOriginalValues();

		return factMembershipImpl;
	}

	@Override
	public int compareTo(FactMembership factMembership) {
		long primaryKey = factMembership.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof FactMembership)) {
			return false;
		}

		FactMembership factMembership = (FactMembership)obj;

		long primaryKey = factMembership.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		FactMembershipModelImpl factMembershipModelImpl = this;

		factMembershipModelImpl._originalLibraryId = factMembershipModelImpl._libraryId;

		factMembershipModelImpl._setOriginalLibraryId = false;

		factMembershipModelImpl._originalPeriod = factMembershipModelImpl._period;

		factMembershipModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<FactMembership> toCacheModel() {
		FactMembershipCacheModel factMembershipCacheModel = new FactMembershipCacheModel();

		factMembershipCacheModel.factMembershipId = getFactMembershipId();

		factMembershipCacheModel.libraryId = getLibraryId();

		factMembershipCacheModel.period = getPeriod();

		String period = factMembershipCacheModel.period;

		if ((period != null) && (period.length() == 0)) {
			factMembershipCacheModel.period = null;
		}

		factMembershipCacheModel.stateId = getStateId();

		factMembershipCacheModel.libraryTypeId = getLibraryTypeId();

		factMembershipCacheModel.membershipCategoryId = getMembershipCategoryId();

		factMembershipCacheModel.activeCount = getActiveCount();

		factMembershipCacheModel.companyId = getCompanyId();

		factMembershipCacheModel.groupId = getGroupId();

		factMembershipCacheModel.userId = getUserId();

		factMembershipCacheModel.userName = getUserName();

		String userName = factMembershipCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			factMembershipCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			factMembershipCacheModel.createDate = createDate.getTime();
		}
		else {
			factMembershipCacheModel.createDate = Long.MIN_VALUE;
		}

		return factMembershipCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{factMembershipId=");
		sb.append(getFactMembershipId());
		sb.append(", libraryId=");
		sb.append(getLibraryId());
		sb.append(", period=");
		sb.append(getPeriod());
		sb.append(", stateId=");
		sb.append(getStateId());
		sb.append(", libraryTypeId=");
		sb.append(getLibraryTypeId());
		sb.append(", membershipCategoryId=");
		sb.append(getMembershipCategoryId());
		sb.append(", activeCount=");
		sb.append(getActiveCount());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("com.idetronic.eis.model.FactMembership");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>factMembershipId</column-name><column-value><![CDATA[");
		sb.append(getFactMembershipId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>libraryId</column-name><column-value><![CDATA[");
		sb.append(getLibraryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>period</column-name><column-value><![CDATA[");
		sb.append(getPeriod());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stateId</column-name><column-value><![CDATA[");
		sb.append(getStateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>libraryTypeId</column-name><column-value><![CDATA[");
		sb.append(getLibraryTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>membershipCategoryId</column-name><column-value><![CDATA[");
		sb.append(getMembershipCategoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>activeCount</column-name><column-value><![CDATA[");
		sb.append(getActiveCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = FactMembership.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			FactMembership.class
		};
	private long _factMembershipId;
	private long _libraryId;
	private long _originalLibraryId;
	private boolean _setOriginalLibraryId;
	private String _period;
	private String _originalPeriod;
	private long _stateId;
	private long _libraryTypeId;
	private long _membershipCategoryId;
	private int _activeCount;
	private long _companyId;
	private long _groupId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private long _columnBitmask;
	private FactMembership _escapedModel;
}