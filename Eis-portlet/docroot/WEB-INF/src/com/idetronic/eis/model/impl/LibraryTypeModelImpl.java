/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.idetronic.eis.model.impl;

import com.idetronic.eis.model.LibraryType;
import com.idetronic.eis.model.LibraryTypeModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the LibraryType service. Represents a row in the &quot;eis_LibraryType&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.idetronic.eis.model.LibraryTypeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LibraryTypeImpl}.
 * </p>
 *
 * @author Mazlan Mat
 * @see LibraryTypeImpl
 * @see com.idetronic.eis.model.LibraryType
 * @see com.idetronic.eis.model.LibraryTypeModel
 * @generated
 */
public class LibraryTypeModelImpl extends BaseModelImpl<LibraryType>
	implements LibraryTypeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a library type model instance should use the {@link com.idetronic.eis.model.LibraryType} interface instead.
	 */
	public static final String TABLE_NAME = "eis_LibraryType";
	public static final Object[][] TABLE_COLUMNS = {
			{ "libraryTypeId", Types.BIGINT },
			{ "libraryTypeCode", Types.VARCHAR },
			{ "libraryTypeName", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table eis_LibraryType (libraryTypeId LONG not null primary key,libraryTypeCode VARCHAR(10) null,libraryTypeName VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table eis_LibraryType";
	public static final String ORDER_BY_JPQL = " ORDER BY libraryType.libraryTypeId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY eis_LibraryType.libraryTypeId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.idetronic.eis.model.LibraryType"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.idetronic.eis.model.LibraryType"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.idetronic.eis.model.LibraryType"),
			true);
	public static long LIBRARYTYPECODE_COLUMN_BITMASK = 1L;
	public static long LIBRARYTYPEID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.idetronic.eis.model.LibraryType"));

	public LibraryTypeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _libraryTypeId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLibraryTypeId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _libraryTypeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LibraryType.class;
	}

	@Override
	public String getModelClassName() {
		return LibraryType.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("libraryTypeId", getLibraryTypeId());
		attributes.put("libraryTypeCode", getLibraryTypeCode());
		attributes.put("libraryTypeName", getLibraryTypeName());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long libraryTypeId = (Long)attributes.get("libraryTypeId");

		if (libraryTypeId != null) {
			setLibraryTypeId(libraryTypeId);
		}

		String libraryTypeCode = (String)attributes.get("libraryTypeCode");

		if (libraryTypeCode != null) {
			setLibraryTypeCode(libraryTypeCode);
		}

		String libraryTypeName = (String)attributes.get("libraryTypeName");

		if (libraryTypeName != null) {
			setLibraryTypeName(libraryTypeName);
		}
	}

	@Override
	public long getLibraryTypeId() {
		return _libraryTypeId;
	}

	@Override
	public void setLibraryTypeId(long libraryTypeId) {
		_libraryTypeId = libraryTypeId;
	}

	@Override
	public String getLibraryTypeCode() {
		if (_libraryTypeCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _libraryTypeCode;
		}
	}

	@Override
	public void setLibraryTypeCode(String libraryTypeCode) {
		_columnBitmask |= LIBRARYTYPECODE_COLUMN_BITMASK;

		if (_originalLibraryTypeCode == null) {
			_originalLibraryTypeCode = _libraryTypeCode;
		}

		_libraryTypeCode = libraryTypeCode;
	}

	public String getOriginalLibraryTypeCode() {
		return GetterUtil.getString(_originalLibraryTypeCode);
	}

	@Override
	public String getLibraryTypeName() {
		if (_libraryTypeName == null) {
			return StringPool.BLANK;
		}
		else {
			return _libraryTypeName;
		}
	}

	@Override
	public void setLibraryTypeName(String libraryTypeName) {
		_libraryTypeName = libraryTypeName;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			LibraryType.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LibraryType toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LibraryType)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LibraryTypeImpl libraryTypeImpl = new LibraryTypeImpl();

		libraryTypeImpl.setLibraryTypeId(getLibraryTypeId());
		libraryTypeImpl.setLibraryTypeCode(getLibraryTypeCode());
		libraryTypeImpl.setLibraryTypeName(getLibraryTypeName());

		libraryTypeImpl.resetOriginalValues();

		return libraryTypeImpl;
	}

	@Override
	public int compareTo(LibraryType libraryType) {
		long primaryKey = libraryType.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LibraryType)) {
			return false;
		}

		LibraryType libraryType = (LibraryType)obj;

		long primaryKey = libraryType.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		LibraryTypeModelImpl libraryTypeModelImpl = this;

		libraryTypeModelImpl._originalLibraryTypeCode = libraryTypeModelImpl._libraryTypeCode;

		libraryTypeModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LibraryType> toCacheModel() {
		LibraryTypeCacheModel libraryTypeCacheModel = new LibraryTypeCacheModel();

		libraryTypeCacheModel.libraryTypeId = getLibraryTypeId();

		libraryTypeCacheModel.libraryTypeCode = getLibraryTypeCode();

		String libraryTypeCode = libraryTypeCacheModel.libraryTypeCode;

		if ((libraryTypeCode != null) && (libraryTypeCode.length() == 0)) {
			libraryTypeCacheModel.libraryTypeCode = null;
		}

		libraryTypeCacheModel.libraryTypeName = getLibraryTypeName();

		String libraryTypeName = libraryTypeCacheModel.libraryTypeName;

		if ((libraryTypeName != null) && (libraryTypeName.length() == 0)) {
			libraryTypeCacheModel.libraryTypeName = null;
		}

		return libraryTypeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{libraryTypeId=");
		sb.append(getLibraryTypeId());
		sb.append(", libraryTypeCode=");
		sb.append(getLibraryTypeCode());
		sb.append(", libraryTypeName=");
		sb.append(getLibraryTypeName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.idetronic.eis.model.LibraryType");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>libraryTypeId</column-name><column-value><![CDATA[");
		sb.append(getLibraryTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>libraryTypeCode</column-name><column-value><![CDATA[");
		sb.append(getLibraryTypeCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>libraryTypeName</column-name><column-value><![CDATA[");
		sb.append(getLibraryTypeName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = LibraryType.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			LibraryType.class
		};
	private long _libraryTypeId;
	private String _libraryTypeCode;
	private String _originalLibraryTypeCode;
	private String _libraryTypeName;
	private long _columnBitmask;
	private LibraryType _escapedModel;
}