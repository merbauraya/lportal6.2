/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.idetronic.eis.model.impl;

import com.idetronic.eis.model.UserReport;
import com.idetronic.eis.model.UserReportModel;
import com.idetronic.eis.model.UserReportSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the UserReport service. Represents a row in the &quot;eis_UserReport&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.idetronic.eis.model.UserReportModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UserReportImpl}.
 * </p>
 *
 * @author Mazlan Mat
 * @see UserReportImpl
 * @see com.idetronic.eis.model.UserReport
 * @see com.idetronic.eis.model.UserReportModel
 * @generated
 */
@JSON(strict = true)
public class UserReportModelImpl extends BaseModelImpl<UserReport>
	implements UserReportModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a user report model instance should use the {@link com.idetronic.eis.model.UserReport} interface instead.
	 */
	public static final String TABLE_NAME = "eis_UserReport";
	public static final Object[][] TABLE_COLUMNS = {
			{ "userReportId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "libraryId", Types.BIGINT },
			{ "reportId", Types.BIGINT },
			{ "createdByUserId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table eis_UserReport (userReportId LONG not null primary key,userId LONG,libraryId LONG,reportId LONG,createdByUserId LONG,userName VARCHAR(75) null,createDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table eis_UserReport";
	public static final String ORDER_BY_JPQL = " ORDER BY userReport.userReportId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY eis_UserReport.userReportId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.idetronic.eis.model.UserReport"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.idetronic.eis.model.UserReport"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.idetronic.eis.model.UserReport"),
			true);
	public static long LIBRARYID_COLUMN_BITMASK = 1L;
	public static long REPORTID_COLUMN_BITMASK = 2L;
	public static long USERID_COLUMN_BITMASK = 4L;
	public static long USERREPORTID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static UserReport toModel(UserReportSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		UserReport model = new UserReportImpl();

		model.setUserReportId(soapModel.getUserReportId());
		model.setUserId(soapModel.getUserId());
		model.setLibraryId(soapModel.getLibraryId());
		model.setReportId(soapModel.getReportId());
		model.setCreatedByUserId(soapModel.getCreatedByUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<UserReport> toModels(UserReportSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<UserReport> models = new ArrayList<UserReport>(soapModels.length);

		for (UserReportSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.idetronic.eis.model.UserReport"));

	public UserReportModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _userReportId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setUserReportId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _userReportId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return UserReport.class;
	}

	@Override
	public String getModelClassName() {
		return UserReport.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("userReportId", getUserReportId());
		attributes.put("userId", getUserId());
		attributes.put("libraryId", getLibraryId());
		attributes.put("reportId", getReportId());
		attributes.put("createdByUserId", getCreatedByUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long userReportId = (Long)attributes.get("userReportId");

		if (userReportId != null) {
			setUserReportId(userReportId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long libraryId = (Long)attributes.get("libraryId");

		if (libraryId != null) {
			setLibraryId(libraryId);
		}

		Long reportId = (Long)attributes.get("reportId");

		if (reportId != null) {
			setReportId(reportId);
		}

		Long createdByUserId = (Long)attributes.get("createdByUserId");

		if (createdByUserId != null) {
			setCreatedByUserId(createdByUserId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}
	}

	@JSON
	@Override
	public long getUserReportId() {
		return _userReportId;
	}

	@Override
	public void setUserReportId(long userReportId) {
		_userReportId = userReportId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public long getLibraryId() {
		return _libraryId;
	}

	@Override
	public void setLibraryId(long libraryId) {
		_columnBitmask |= LIBRARYID_COLUMN_BITMASK;

		if (!_setOriginalLibraryId) {
			_setOriginalLibraryId = true;

			_originalLibraryId = _libraryId;
		}

		_libraryId = libraryId;
	}

	public long getOriginalLibraryId() {
		return _originalLibraryId;
	}

	@JSON
	@Override
	public long getReportId() {
		return _reportId;
	}

	@Override
	public void setReportId(long reportId) {
		_columnBitmask |= REPORTID_COLUMN_BITMASK;

		if (!_setOriginalReportId) {
			_setOriginalReportId = true;

			_originalReportId = _reportId;
		}

		_reportId = reportId;
	}

	public long getOriginalReportId() {
		return _originalReportId;
	}

	@JSON
	@Override
	public long getCreatedByUserId() {
		return _createdByUserId;
	}

	@Override
	public void setCreatedByUserId(long createdByUserId) {
		_createdByUserId = createdByUserId;
	}

	@Override
	public String getCreatedByUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getCreatedByUserId(), "uuid",
			_createdByUserUuid);
	}

	@Override
	public void setCreatedByUserUuid(String createdByUserUuid) {
		_createdByUserUuid = createdByUserUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			UserReport.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public UserReport toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (UserReport)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UserReportImpl userReportImpl = new UserReportImpl();

		userReportImpl.setUserReportId(getUserReportId());
		userReportImpl.setUserId(getUserId());
		userReportImpl.setLibraryId(getLibraryId());
		userReportImpl.setReportId(getReportId());
		userReportImpl.setCreatedByUserId(getCreatedByUserId());
		userReportImpl.setUserName(getUserName());
		userReportImpl.setCreateDate(getCreateDate());

		userReportImpl.resetOriginalValues();

		return userReportImpl;
	}

	@Override
	public int compareTo(UserReport userReport) {
		long primaryKey = userReport.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof UserReport)) {
			return false;
		}

		UserReport userReport = (UserReport)obj;

		long primaryKey = userReport.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		UserReportModelImpl userReportModelImpl = this;

		userReportModelImpl._originalUserId = userReportModelImpl._userId;

		userReportModelImpl._setOriginalUserId = false;

		userReportModelImpl._originalLibraryId = userReportModelImpl._libraryId;

		userReportModelImpl._setOriginalLibraryId = false;

		userReportModelImpl._originalReportId = userReportModelImpl._reportId;

		userReportModelImpl._setOriginalReportId = false;

		userReportModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<UserReport> toCacheModel() {
		UserReportCacheModel userReportCacheModel = new UserReportCacheModel();

		userReportCacheModel.userReportId = getUserReportId();

		userReportCacheModel.userId = getUserId();

		userReportCacheModel.libraryId = getLibraryId();

		userReportCacheModel.reportId = getReportId();

		userReportCacheModel.createdByUserId = getCreatedByUserId();

		userReportCacheModel.userName = getUserName();

		String userName = userReportCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			userReportCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			userReportCacheModel.createDate = createDate.getTime();
		}
		else {
			userReportCacheModel.createDate = Long.MIN_VALUE;
		}

		return userReportCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{userReportId=");
		sb.append(getUserReportId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", libraryId=");
		sb.append(getLibraryId());
		sb.append(", reportId=");
		sb.append(getReportId());
		sb.append(", createdByUserId=");
		sb.append(getCreatedByUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.idetronic.eis.model.UserReport");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>userReportId</column-name><column-value><![CDATA[");
		sb.append(getUserReportId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>libraryId</column-name><column-value><![CDATA[");
		sb.append(getLibraryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reportId</column-name><column-value><![CDATA[");
		sb.append(getReportId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdByUserId</column-name><column-value><![CDATA[");
		sb.append(getCreatedByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = UserReport.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			UserReport.class
		};
	private long _userReportId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private long _libraryId;
	private long _originalLibraryId;
	private boolean _setOriginalLibraryId;
	private long _reportId;
	private long _originalReportId;
	private boolean _setOriginalReportId;
	private long _createdByUserId;
	private String _createdByUserUuid;
	private String _userName;
	private Date _createDate;
	private long _columnBitmask;
	private UserReport _escapedModel;
}