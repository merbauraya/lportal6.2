/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.idetronic.eis.model.impl;

import com.idetronic.eis.model.UserData;
import com.idetronic.eis.model.UserDataModel;
import com.idetronic.eis.model.UserDataSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the UserData service. Represents a row in the &quot;eis_UserData&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.idetronic.eis.model.UserDataModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UserDataImpl}.
 * </p>
 *
 * @author Mazlan Mat
 * @see UserDataImpl
 * @see com.idetronic.eis.model.UserData
 * @see com.idetronic.eis.model.UserDataModel
 * @generated
 */
@JSON(strict = true)
public class UserDataModelImpl extends BaseModelImpl<UserData>
	implements UserDataModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a user data model instance should use the {@link com.idetronic.eis.model.UserData} interface instead.
	 */
	public static final String TABLE_NAME = "eis_UserData";
	public static final Object[][] TABLE_COLUMNS = {
			{ "userDataId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "libraryId", Types.BIGINT },
			{ "dataId", Types.BIGINT },
			{ "createdByUserId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table eis_UserData (userDataId LONG not null primary key,userId LONG,libraryId LONG,dataId LONG,createdByUserId LONG,userName VARCHAR(75) null,createDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table eis_UserData";
	public static final String ORDER_BY_JPQL = " ORDER BY userData.userDataId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY eis_UserData.userDataId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.idetronic.eis.model.UserData"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.idetronic.eis.model.UserData"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.idetronic.eis.model.UserData"),
			true);
	public static long DATAID_COLUMN_BITMASK = 1L;
	public static long LIBRARYID_COLUMN_BITMASK = 2L;
	public static long USERID_COLUMN_BITMASK = 4L;
	public static long USERDATAID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static UserData toModel(UserDataSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		UserData model = new UserDataImpl();

		model.setUserDataId(soapModel.getUserDataId());
		model.setUserId(soapModel.getUserId());
		model.setLibraryId(soapModel.getLibraryId());
		model.setDataId(soapModel.getDataId());
		model.setCreatedByUserId(soapModel.getCreatedByUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<UserData> toModels(UserDataSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<UserData> models = new ArrayList<UserData>(soapModels.length);

		for (UserDataSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.idetronic.eis.model.UserData"));

	public UserDataModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _userDataId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setUserDataId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _userDataId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return UserData.class;
	}

	@Override
	public String getModelClassName() {
		return UserData.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("userDataId", getUserDataId());
		attributes.put("userId", getUserId());
		attributes.put("libraryId", getLibraryId());
		attributes.put("dataId", getDataId());
		attributes.put("createdByUserId", getCreatedByUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long userDataId = (Long)attributes.get("userDataId");

		if (userDataId != null) {
			setUserDataId(userDataId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long libraryId = (Long)attributes.get("libraryId");

		if (libraryId != null) {
			setLibraryId(libraryId);
		}

		Long dataId = (Long)attributes.get("dataId");

		if (dataId != null) {
			setDataId(dataId);
		}

		Long createdByUserId = (Long)attributes.get("createdByUserId");

		if (createdByUserId != null) {
			setCreatedByUserId(createdByUserId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}
	}

	@JSON
	@Override
	public long getUserDataId() {
		return _userDataId;
	}

	@Override
	public void setUserDataId(long userDataId) {
		_userDataId = userDataId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public long getLibraryId() {
		return _libraryId;
	}

	@Override
	public void setLibraryId(long libraryId) {
		_columnBitmask |= LIBRARYID_COLUMN_BITMASK;

		if (!_setOriginalLibraryId) {
			_setOriginalLibraryId = true;

			_originalLibraryId = _libraryId;
		}

		_libraryId = libraryId;
	}

	public long getOriginalLibraryId() {
		return _originalLibraryId;
	}

	@JSON
	@Override
	public long getDataId() {
		return _dataId;
	}

	@Override
	public void setDataId(long dataId) {
		_columnBitmask |= DATAID_COLUMN_BITMASK;

		if (!_setOriginalDataId) {
			_setOriginalDataId = true;

			_originalDataId = _dataId;
		}

		_dataId = dataId;
	}

	public long getOriginalDataId() {
		return _originalDataId;
	}

	@JSON
	@Override
	public long getCreatedByUserId() {
		return _createdByUserId;
	}

	@Override
	public void setCreatedByUserId(long createdByUserId) {
		_createdByUserId = createdByUserId;
	}

	@Override
	public String getCreatedByUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getCreatedByUserId(), "uuid",
			_createdByUserUuid);
	}

	@Override
	public void setCreatedByUserUuid(String createdByUserUuid) {
		_createdByUserUuid = createdByUserUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			UserData.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public UserData toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (UserData)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UserDataImpl userDataImpl = new UserDataImpl();

		userDataImpl.setUserDataId(getUserDataId());
		userDataImpl.setUserId(getUserId());
		userDataImpl.setLibraryId(getLibraryId());
		userDataImpl.setDataId(getDataId());
		userDataImpl.setCreatedByUserId(getCreatedByUserId());
		userDataImpl.setUserName(getUserName());
		userDataImpl.setCreateDate(getCreateDate());

		userDataImpl.resetOriginalValues();

		return userDataImpl;
	}

	@Override
	public int compareTo(UserData userData) {
		long primaryKey = userData.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof UserData)) {
			return false;
		}

		UserData userData = (UserData)obj;

		long primaryKey = userData.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		UserDataModelImpl userDataModelImpl = this;

		userDataModelImpl._originalUserId = userDataModelImpl._userId;

		userDataModelImpl._setOriginalUserId = false;

		userDataModelImpl._originalLibraryId = userDataModelImpl._libraryId;

		userDataModelImpl._setOriginalLibraryId = false;

		userDataModelImpl._originalDataId = userDataModelImpl._dataId;

		userDataModelImpl._setOriginalDataId = false;

		userDataModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<UserData> toCacheModel() {
		UserDataCacheModel userDataCacheModel = new UserDataCacheModel();

		userDataCacheModel.userDataId = getUserDataId();

		userDataCacheModel.userId = getUserId();

		userDataCacheModel.libraryId = getLibraryId();

		userDataCacheModel.dataId = getDataId();

		userDataCacheModel.createdByUserId = getCreatedByUserId();

		userDataCacheModel.userName = getUserName();

		String userName = userDataCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			userDataCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			userDataCacheModel.createDate = createDate.getTime();
		}
		else {
			userDataCacheModel.createDate = Long.MIN_VALUE;
		}

		return userDataCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{userDataId=");
		sb.append(getUserDataId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", libraryId=");
		sb.append(getLibraryId());
		sb.append(", dataId=");
		sb.append(getDataId());
		sb.append(", createdByUserId=");
		sb.append(getCreatedByUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.idetronic.eis.model.UserData");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>userDataId</column-name><column-value><![CDATA[");
		sb.append(getUserDataId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>libraryId</column-name><column-value><![CDATA[");
		sb.append(getLibraryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dataId</column-name><column-value><![CDATA[");
		sb.append(getDataId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdByUserId</column-name><column-value><![CDATA[");
		sb.append(getCreatedByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = UserData.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			UserData.class
		};
	private long _userDataId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private long _libraryId;
	private long _originalLibraryId;
	private boolean _setOriginalLibraryId;
	private long _dataId;
	private long _originalDataId;
	private boolean _setOriginalDataId;
	private long _createdByUserId;
	private String _createdByUserUuid;
	private String _userName;
	private Date _createDate;
	private long _columnBitmask;
	private UserData _escapedModel;
}