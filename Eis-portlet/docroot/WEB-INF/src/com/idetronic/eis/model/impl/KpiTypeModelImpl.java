/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.idetronic.eis.model.impl;

import com.idetronic.eis.model.KpiType;
import com.idetronic.eis.model.KpiTypeModel;
import com.idetronic.eis.model.KpiTypeSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the KpiType service. Represents a row in the &quot;eis_KpiType&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.idetronic.eis.model.KpiTypeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link KpiTypeImpl}.
 * </p>
 *
 * @author Mazlan Mat
 * @see KpiTypeImpl
 * @see com.idetronic.eis.model.KpiType
 * @see com.idetronic.eis.model.KpiTypeModel
 * @generated
 */
@JSON(strict = true)
public class KpiTypeModelImpl extends BaseModelImpl<KpiType>
	implements KpiTypeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a kpi type model instance should use the {@link com.idetronic.eis.model.KpiType} interface instead.
	 */
	public static final String TABLE_NAME = "eis_KpiType";
	public static final Object[][] TABLE_COLUMNS = {
			{ "kpiTypeId", Types.BIGINT },
			{ "kpiTypeKey", Types.VARCHAR },
			{ "kpiName", Types.VARCHAR },
			{ "periodMonth", Types.BOOLEAN },
			{ "periodQuarter", Types.BOOLEAN },
			{ "periodSemiAnnual", Types.BOOLEAN },
			{ "periodYear", Types.BOOLEAN },
			{ "isDecimal", Types.BOOLEAN },
			{ "manualValue", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table eis_KpiType (kpiTypeId LONG not null primary key,kpiTypeKey VARCHAR(30) null,kpiName VARCHAR(250) null,periodMonth BOOLEAN,periodQuarter BOOLEAN,periodSemiAnnual BOOLEAN,periodYear BOOLEAN,isDecimal BOOLEAN,manualValue BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table eis_KpiType";
	public static final String ORDER_BY_JPQL = " ORDER BY kpiType.kpiTypeId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY eis_KpiType.kpiTypeId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.idetronic.eis.model.KpiType"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.idetronic.eis.model.KpiType"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.idetronic.eis.model.KpiType"),
			true);
	public static long KPITYPEKEY_COLUMN_BITMASK = 1L;
	public static long KPITYPEID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static KpiType toModel(KpiTypeSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		KpiType model = new KpiTypeImpl();

		model.setKpiTypeId(soapModel.getKpiTypeId());
		model.setKpiTypeKey(soapModel.getKpiTypeKey());
		model.setKpiName(soapModel.getKpiName());
		model.setPeriodMonth(soapModel.getPeriodMonth());
		model.setPeriodQuarter(soapModel.getPeriodQuarter());
		model.setPeriodSemiAnnual(soapModel.getPeriodSemiAnnual());
		model.setPeriodYear(soapModel.getPeriodYear());
		model.setIsDecimal(soapModel.getIsDecimal());
		model.setManualValue(soapModel.getManualValue());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<KpiType> toModels(KpiTypeSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<KpiType> models = new ArrayList<KpiType>(soapModels.length);

		for (KpiTypeSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.idetronic.eis.model.KpiType"));

	public KpiTypeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _kpiTypeId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setKpiTypeId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _kpiTypeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return KpiType.class;
	}

	@Override
	public String getModelClassName() {
		return KpiType.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("kpiTypeId", getKpiTypeId());
		attributes.put("kpiTypeKey", getKpiTypeKey());
		attributes.put("kpiName", getKpiName());
		attributes.put("periodMonth", getPeriodMonth());
		attributes.put("periodQuarter", getPeriodQuarter());
		attributes.put("periodSemiAnnual", getPeriodSemiAnnual());
		attributes.put("periodYear", getPeriodYear());
		attributes.put("isDecimal", getIsDecimal());
		attributes.put("manualValue", getManualValue());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long kpiTypeId = (Long)attributes.get("kpiTypeId");

		if (kpiTypeId != null) {
			setKpiTypeId(kpiTypeId);
		}

		String kpiTypeKey = (String)attributes.get("kpiTypeKey");

		if (kpiTypeKey != null) {
			setKpiTypeKey(kpiTypeKey);
		}

		String kpiName = (String)attributes.get("kpiName");

		if (kpiName != null) {
			setKpiName(kpiName);
		}

		Boolean periodMonth = (Boolean)attributes.get("periodMonth");

		if (periodMonth != null) {
			setPeriodMonth(periodMonth);
		}

		Boolean periodQuarter = (Boolean)attributes.get("periodQuarter");

		if (periodQuarter != null) {
			setPeriodQuarter(periodQuarter);
		}

		Boolean periodSemiAnnual = (Boolean)attributes.get("periodSemiAnnual");

		if (periodSemiAnnual != null) {
			setPeriodSemiAnnual(periodSemiAnnual);
		}

		Boolean periodYear = (Boolean)attributes.get("periodYear");

		if (periodYear != null) {
			setPeriodYear(periodYear);
		}

		Boolean isDecimal = (Boolean)attributes.get("isDecimal");

		if (isDecimal != null) {
			setIsDecimal(isDecimal);
		}

		Boolean manualValue = (Boolean)attributes.get("manualValue");

		if (manualValue != null) {
			setManualValue(manualValue);
		}
	}

	@JSON
	@Override
	public long getKpiTypeId() {
		return _kpiTypeId;
	}

	@Override
	public void setKpiTypeId(long kpiTypeId) {
		_kpiTypeId = kpiTypeId;
	}

	@JSON
	@Override
	public String getKpiTypeKey() {
		if (_kpiTypeKey == null) {
			return StringPool.BLANK;
		}
		else {
			return _kpiTypeKey;
		}
	}

	@Override
	public void setKpiTypeKey(String kpiTypeKey) {
		_columnBitmask |= KPITYPEKEY_COLUMN_BITMASK;

		if (_originalKpiTypeKey == null) {
			_originalKpiTypeKey = _kpiTypeKey;
		}

		_kpiTypeKey = kpiTypeKey;
	}

	public String getOriginalKpiTypeKey() {
		return GetterUtil.getString(_originalKpiTypeKey);
	}

	@JSON
	@Override
	public String getKpiName() {
		if (_kpiName == null) {
			return StringPool.BLANK;
		}
		else {
			return _kpiName;
		}
	}

	@Override
	public void setKpiName(String kpiName) {
		_kpiName = kpiName;
	}

	@JSON
	@Override
	public boolean getPeriodMonth() {
		return _periodMonth;
	}

	@Override
	public boolean isPeriodMonth() {
		return _periodMonth;
	}

	@Override
	public void setPeriodMonth(boolean periodMonth) {
		_periodMonth = periodMonth;
	}

	@JSON
	@Override
	public boolean getPeriodQuarter() {
		return _periodQuarter;
	}

	@Override
	public boolean isPeriodQuarter() {
		return _periodQuarter;
	}

	@Override
	public void setPeriodQuarter(boolean periodQuarter) {
		_periodQuarter = periodQuarter;
	}

	@JSON
	@Override
	public boolean getPeriodSemiAnnual() {
		return _periodSemiAnnual;
	}

	@Override
	public boolean isPeriodSemiAnnual() {
		return _periodSemiAnnual;
	}

	@Override
	public void setPeriodSemiAnnual(boolean periodSemiAnnual) {
		_periodSemiAnnual = periodSemiAnnual;
	}

	@JSON
	@Override
	public boolean getPeriodYear() {
		return _periodYear;
	}

	@Override
	public boolean isPeriodYear() {
		return _periodYear;
	}

	@Override
	public void setPeriodYear(boolean periodYear) {
		_periodYear = periodYear;
	}

	@JSON
	@Override
	public boolean getIsDecimal() {
		return _isDecimal;
	}

	@Override
	public boolean isIsDecimal() {
		return _isDecimal;
	}

	@Override
	public void setIsDecimal(boolean isDecimal) {
		_isDecimal = isDecimal;
	}

	@JSON
	@Override
	public boolean getManualValue() {
		return _manualValue;
	}

	@Override
	public boolean isManualValue() {
		return _manualValue;
	}

	@Override
	public void setManualValue(boolean manualValue) {
		_manualValue = manualValue;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			KpiType.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public KpiType toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (KpiType)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		KpiTypeImpl kpiTypeImpl = new KpiTypeImpl();

		kpiTypeImpl.setKpiTypeId(getKpiTypeId());
		kpiTypeImpl.setKpiTypeKey(getKpiTypeKey());
		kpiTypeImpl.setKpiName(getKpiName());
		kpiTypeImpl.setPeriodMonth(getPeriodMonth());
		kpiTypeImpl.setPeriodQuarter(getPeriodQuarter());
		kpiTypeImpl.setPeriodSemiAnnual(getPeriodSemiAnnual());
		kpiTypeImpl.setPeriodYear(getPeriodYear());
		kpiTypeImpl.setIsDecimal(getIsDecimal());
		kpiTypeImpl.setManualValue(getManualValue());

		kpiTypeImpl.resetOriginalValues();

		return kpiTypeImpl;
	}

	@Override
	public int compareTo(KpiType kpiType) {
		long primaryKey = kpiType.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof KpiType)) {
			return false;
		}

		KpiType kpiType = (KpiType)obj;

		long primaryKey = kpiType.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		KpiTypeModelImpl kpiTypeModelImpl = this;

		kpiTypeModelImpl._originalKpiTypeKey = kpiTypeModelImpl._kpiTypeKey;

		kpiTypeModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<KpiType> toCacheModel() {
		KpiTypeCacheModel kpiTypeCacheModel = new KpiTypeCacheModel();

		kpiTypeCacheModel.kpiTypeId = getKpiTypeId();

		kpiTypeCacheModel.kpiTypeKey = getKpiTypeKey();

		String kpiTypeKey = kpiTypeCacheModel.kpiTypeKey;

		if ((kpiTypeKey != null) && (kpiTypeKey.length() == 0)) {
			kpiTypeCacheModel.kpiTypeKey = null;
		}

		kpiTypeCacheModel.kpiName = getKpiName();

		String kpiName = kpiTypeCacheModel.kpiName;

		if ((kpiName != null) && (kpiName.length() == 0)) {
			kpiTypeCacheModel.kpiName = null;
		}

		kpiTypeCacheModel.periodMonth = getPeriodMonth();

		kpiTypeCacheModel.periodQuarter = getPeriodQuarter();

		kpiTypeCacheModel.periodSemiAnnual = getPeriodSemiAnnual();

		kpiTypeCacheModel.periodYear = getPeriodYear();

		kpiTypeCacheModel.isDecimal = getIsDecimal();

		kpiTypeCacheModel.manualValue = getManualValue();

		return kpiTypeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{kpiTypeId=");
		sb.append(getKpiTypeId());
		sb.append(", kpiTypeKey=");
		sb.append(getKpiTypeKey());
		sb.append(", kpiName=");
		sb.append(getKpiName());
		sb.append(", periodMonth=");
		sb.append(getPeriodMonth());
		sb.append(", periodQuarter=");
		sb.append(getPeriodQuarter());
		sb.append(", periodSemiAnnual=");
		sb.append(getPeriodSemiAnnual());
		sb.append(", periodYear=");
		sb.append(getPeriodYear());
		sb.append(", isDecimal=");
		sb.append(getIsDecimal());
		sb.append(", manualValue=");
		sb.append(getManualValue());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("com.idetronic.eis.model.KpiType");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>kpiTypeId</column-name><column-value><![CDATA[");
		sb.append(getKpiTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>kpiTypeKey</column-name><column-value><![CDATA[");
		sb.append(getKpiTypeKey());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>kpiName</column-name><column-value><![CDATA[");
		sb.append(getKpiName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>periodMonth</column-name><column-value><![CDATA[");
		sb.append(getPeriodMonth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>periodQuarter</column-name><column-value><![CDATA[");
		sb.append(getPeriodQuarter());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>periodSemiAnnual</column-name><column-value><![CDATA[");
		sb.append(getPeriodSemiAnnual());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>periodYear</column-name><column-value><![CDATA[");
		sb.append(getPeriodYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isDecimal</column-name><column-value><![CDATA[");
		sb.append(getIsDecimal());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>manualValue</column-name><column-value><![CDATA[");
		sb.append(getManualValue());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = KpiType.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			KpiType.class
		};
	private long _kpiTypeId;
	private String _kpiTypeKey;
	private String _originalKpiTypeKey;
	private String _kpiName;
	private boolean _periodMonth;
	private boolean _periodQuarter;
	private boolean _periodSemiAnnual;
	private boolean _periodYear;
	private boolean _isDecimal;
	private boolean _manualValue;
	private long _columnBitmask;
	private KpiType _escapedModel;
}