/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.idetronic.eis.model.impl;

import com.idetronic.eis.model.KpiEntry;
import com.idetronic.eis.model.KpiEntryModel;
import com.idetronic.eis.model.KpiEntrySoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the KpiEntry service. Represents a row in the &quot;eis_KpiEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.idetronic.eis.model.KpiEntryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link KpiEntryImpl}.
 * </p>
 *
 * @author Mazlan Mat
 * @see KpiEntryImpl
 * @see com.idetronic.eis.model.KpiEntry
 * @see com.idetronic.eis.model.KpiEntryModel
 * @generated
 */
@JSON(strict = true)
public class KpiEntryModelImpl extends BaseModelImpl<KpiEntry>
	implements KpiEntryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a kpi entry model instance should use the {@link com.idetronic.eis.model.KpiEntry} interface instead.
	 */
	public static final String TABLE_NAME = "eis_KpiEntry";
	public static final Object[][] TABLE_COLUMNS = {
			{ "kpiEntryId", Types.BIGINT },
			{ "kpiTypeId", Types.BIGINT },
			{ "periodYear", Types.VARCHAR },
			{ "periodType", Types.INTEGER },
			{ "period", Types.VARCHAR },
			{ "value", Types.DOUBLE },
			{ "actual", Types.DOUBLE }
		};
	public static final String TABLE_SQL_CREATE = "create table eis_KpiEntry (kpiEntryId LONG not null primary key,kpiTypeId LONG,periodYear VARCHAR(75) null,periodType INTEGER,period VARCHAR(75) null,value DOUBLE,actual DOUBLE)";
	public static final String TABLE_SQL_DROP = "drop table eis_KpiEntry";
	public static final String ORDER_BY_JPQL = " ORDER BY kpiEntry.period ASC";
	public static final String ORDER_BY_SQL = " ORDER BY eis_KpiEntry.period ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.idetronic.eis.model.KpiEntry"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.idetronic.eis.model.KpiEntry"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.idetronic.eis.model.KpiEntry"),
			true);
	public static long KPITYPEID_COLUMN_BITMASK = 1L;
	public static long PERIOD_COLUMN_BITMASK = 2L;
	public static long PERIODTYPE_COLUMN_BITMASK = 4L;
	public static long PERIODYEAR_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static KpiEntry toModel(KpiEntrySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		KpiEntry model = new KpiEntryImpl();

		model.setKpiEntryId(soapModel.getKpiEntryId());
		model.setKpiTypeId(soapModel.getKpiTypeId());
		model.setPeriodYear(soapModel.getPeriodYear());
		model.setPeriodType(soapModel.getPeriodType());
		model.setPeriod(soapModel.getPeriod());
		model.setValue(soapModel.getValue());
		model.setActual(soapModel.getActual());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<KpiEntry> toModels(KpiEntrySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<KpiEntry> models = new ArrayList<KpiEntry>(soapModels.length);

		for (KpiEntrySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.idetronic.eis.model.KpiEntry"));

	public KpiEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _kpiEntryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setKpiEntryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _kpiEntryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return KpiEntry.class;
	}

	@Override
	public String getModelClassName() {
		return KpiEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("kpiEntryId", getKpiEntryId());
		attributes.put("kpiTypeId", getKpiTypeId());
		attributes.put("periodYear", getPeriodYear());
		attributes.put("periodType", getPeriodType());
		attributes.put("period", getPeriod());
		attributes.put("value", getValue());
		attributes.put("actual", getActual());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long kpiEntryId = (Long)attributes.get("kpiEntryId");

		if (kpiEntryId != null) {
			setKpiEntryId(kpiEntryId);
		}

		Long kpiTypeId = (Long)attributes.get("kpiTypeId");

		if (kpiTypeId != null) {
			setKpiTypeId(kpiTypeId);
		}

		String periodYear = (String)attributes.get("periodYear");

		if (periodYear != null) {
			setPeriodYear(periodYear);
		}

		Integer periodType = (Integer)attributes.get("periodType");

		if (periodType != null) {
			setPeriodType(periodType);
		}

		String period = (String)attributes.get("period");

		if (period != null) {
			setPeriod(period);
		}

		Double value = (Double)attributes.get("value");

		if (value != null) {
			setValue(value);
		}

		Double actual = (Double)attributes.get("actual");

		if (actual != null) {
			setActual(actual);
		}
	}

	@JSON
	@Override
	public long getKpiEntryId() {
		return _kpiEntryId;
	}

	@Override
	public void setKpiEntryId(long kpiEntryId) {
		_kpiEntryId = kpiEntryId;
	}

	@JSON
	@Override
	public long getKpiTypeId() {
		return _kpiTypeId;
	}

	@Override
	public void setKpiTypeId(long kpiTypeId) {
		_columnBitmask |= KPITYPEID_COLUMN_BITMASK;

		if (!_setOriginalKpiTypeId) {
			_setOriginalKpiTypeId = true;

			_originalKpiTypeId = _kpiTypeId;
		}

		_kpiTypeId = kpiTypeId;
	}

	public long getOriginalKpiTypeId() {
		return _originalKpiTypeId;
	}

	@JSON
	@Override
	public String getPeriodYear() {
		if (_periodYear == null) {
			return StringPool.BLANK;
		}
		else {
			return _periodYear;
		}
	}

	@Override
	public void setPeriodYear(String periodYear) {
		_columnBitmask |= PERIODYEAR_COLUMN_BITMASK;

		if (_originalPeriodYear == null) {
			_originalPeriodYear = _periodYear;
		}

		_periodYear = periodYear;
	}

	public String getOriginalPeriodYear() {
		return GetterUtil.getString(_originalPeriodYear);
	}

	@JSON
	@Override
	public int getPeriodType() {
		return _periodType;
	}

	@Override
	public void setPeriodType(int periodType) {
		_columnBitmask |= PERIODTYPE_COLUMN_BITMASK;

		if (!_setOriginalPeriodType) {
			_setOriginalPeriodType = true;

			_originalPeriodType = _periodType;
		}

		_periodType = periodType;
	}

	public int getOriginalPeriodType() {
		return _originalPeriodType;
	}

	@JSON
	@Override
	public String getPeriod() {
		if (_period == null) {
			return StringPool.BLANK;
		}
		else {
			return _period;
		}
	}

	@Override
	public void setPeriod(String period) {
		_columnBitmask = -1L;

		if (_originalPeriod == null) {
			_originalPeriod = _period;
		}

		_period = period;
	}

	public String getOriginalPeriod() {
		return GetterUtil.getString(_originalPeriod);
	}

	@JSON
	@Override
	public double getValue() {
		return _value;
	}

	@Override
	public void setValue(double value) {
		_value = value;
	}

	@JSON
	@Override
	public double getActual() {
		return _actual;
	}

	@Override
	public void setActual(double actual) {
		_actual = actual;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			KpiEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public KpiEntry toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (KpiEntry)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		KpiEntryImpl kpiEntryImpl = new KpiEntryImpl();

		kpiEntryImpl.setKpiEntryId(getKpiEntryId());
		kpiEntryImpl.setKpiTypeId(getKpiTypeId());
		kpiEntryImpl.setPeriodYear(getPeriodYear());
		kpiEntryImpl.setPeriodType(getPeriodType());
		kpiEntryImpl.setPeriod(getPeriod());
		kpiEntryImpl.setValue(getValue());
		kpiEntryImpl.setActual(getActual());

		kpiEntryImpl.resetOriginalValues();

		return kpiEntryImpl;
	}

	@Override
	public int compareTo(KpiEntry kpiEntry) {
		int value = 0;

		value = getPeriod().compareTo(kpiEntry.getPeriod());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof KpiEntry)) {
			return false;
		}

		KpiEntry kpiEntry = (KpiEntry)obj;

		long primaryKey = kpiEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		KpiEntryModelImpl kpiEntryModelImpl = this;

		kpiEntryModelImpl._originalKpiTypeId = kpiEntryModelImpl._kpiTypeId;

		kpiEntryModelImpl._setOriginalKpiTypeId = false;

		kpiEntryModelImpl._originalPeriodYear = kpiEntryModelImpl._periodYear;

		kpiEntryModelImpl._originalPeriodType = kpiEntryModelImpl._periodType;

		kpiEntryModelImpl._setOriginalPeriodType = false;

		kpiEntryModelImpl._originalPeriod = kpiEntryModelImpl._period;

		kpiEntryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<KpiEntry> toCacheModel() {
		KpiEntryCacheModel kpiEntryCacheModel = new KpiEntryCacheModel();

		kpiEntryCacheModel.kpiEntryId = getKpiEntryId();

		kpiEntryCacheModel.kpiTypeId = getKpiTypeId();

		kpiEntryCacheModel.periodYear = getPeriodYear();

		String periodYear = kpiEntryCacheModel.periodYear;

		if ((periodYear != null) && (periodYear.length() == 0)) {
			kpiEntryCacheModel.periodYear = null;
		}

		kpiEntryCacheModel.periodType = getPeriodType();

		kpiEntryCacheModel.period = getPeriod();

		String period = kpiEntryCacheModel.period;

		if ((period != null) && (period.length() == 0)) {
			kpiEntryCacheModel.period = null;
		}

		kpiEntryCacheModel.value = getValue();

		kpiEntryCacheModel.actual = getActual();

		return kpiEntryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{kpiEntryId=");
		sb.append(getKpiEntryId());
		sb.append(", kpiTypeId=");
		sb.append(getKpiTypeId());
		sb.append(", periodYear=");
		sb.append(getPeriodYear());
		sb.append(", periodType=");
		sb.append(getPeriodType());
		sb.append(", period=");
		sb.append(getPeriod());
		sb.append(", value=");
		sb.append(getValue());
		sb.append(", actual=");
		sb.append(getActual());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.idetronic.eis.model.KpiEntry");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>kpiEntryId</column-name><column-value><![CDATA[");
		sb.append(getKpiEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>kpiTypeId</column-name><column-value><![CDATA[");
		sb.append(getKpiTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>periodYear</column-name><column-value><![CDATA[");
		sb.append(getPeriodYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>periodType</column-name><column-value><![CDATA[");
		sb.append(getPeriodType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>period</column-name><column-value><![CDATA[");
		sb.append(getPeriod());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>value</column-name><column-value><![CDATA[");
		sb.append(getValue());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>actual</column-name><column-value><![CDATA[");
		sb.append(getActual());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = KpiEntry.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			KpiEntry.class
		};
	private long _kpiEntryId;
	private long _kpiTypeId;
	private long _originalKpiTypeId;
	private boolean _setOriginalKpiTypeId;
	private String _periodYear;
	private String _originalPeriodYear;
	private int _periodType;
	private int _originalPeriodType;
	private boolean _setOriginalPeriodType;
	private String _period;
	private String _originalPeriod;
	private double _value;
	private double _actual;
	private long _columnBitmask;
	private KpiEntry _escapedModel;
}