/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.idetronic.eis.model.impl;

import com.idetronic.eis.model.MasterType;
import com.idetronic.eis.model.MasterTypeModel;
import com.idetronic.eis.model.MasterTypeSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the MasterType service. Represents a row in the &quot;eis_MasterType&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.idetronic.eis.model.MasterTypeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MasterTypeImpl}.
 * </p>
 *
 * @author Mazlan Mat
 * @see MasterTypeImpl
 * @see com.idetronic.eis.model.MasterType
 * @see com.idetronic.eis.model.MasterTypeModel
 * @generated
 */
@JSON(strict = true)
public class MasterTypeModelImpl extends BaseModelImpl<MasterType>
	implements MasterTypeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a master type model instance should use the {@link com.idetronic.eis.model.MasterType} interface instead.
	 */
	public static final String TABLE_NAME = "eis_MasterType";
	public static final Object[][] TABLE_COLUMNS = {
			{ "masterTypeId", Types.BIGINT },
			{ "masterTypeName", Types.VARCHAR },
			{ "status", Types.INTEGER },
			{ "parentType", Types.BOOLEAN },
			{ "pageLabel", Types.VARCHAR },
			{ "nameLabel", Types.VARCHAR },
			{ "hasParent1", Types.BOOLEAN },
			{ "parentId1", Types.BIGINT },
			{ "parentId2", Types.BIGINT },
			{ "hasParent2", Types.BOOLEAN },
			{ "parent1Label", Types.VARCHAR },
			{ "parent2Label", Types.VARCHAR },
			{ "hasStatus1", Types.BOOLEAN },
			{ "hasStatus2", Types.BOOLEAN },
			{ "hasStatus3", Types.BOOLEAN },
			{ "hasStatus4", Types.BOOLEAN },
			{ "hasStatus5", Types.BOOLEAN },
			{ "status1Label", Types.VARCHAR },
			{ "status2Label", Types.VARCHAR },
			{ "status3Label", Types.VARCHAR },
			{ "status4Label", Types.VARCHAR },
			{ "status5Label", Types.VARCHAR },
			{ "hasCode", Types.BOOLEAN },
			{ "codeLabel", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table eis_MasterType (masterTypeId LONG not null primary key,masterTypeName VARCHAR(75) null,status INTEGER,parentType BOOLEAN,pageLabel VARCHAR(75) null,nameLabel VARCHAR(75) null,hasParent1 BOOLEAN,parentId1 LONG,parentId2 LONG,hasParent2 BOOLEAN,parent1Label VARCHAR(75) null,parent2Label VARCHAR(75) null,hasStatus1 BOOLEAN,hasStatus2 BOOLEAN,hasStatus3 BOOLEAN,hasStatus4 BOOLEAN,hasStatus5 BOOLEAN,status1Label VARCHAR(75) null,status2Label VARCHAR(75) null,status3Label VARCHAR(75) null,status4Label VARCHAR(75) null,status5Label VARCHAR(75) null,hasCode BOOLEAN,codeLabel VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table eis_MasterType";
	public static final String ORDER_BY_JPQL = " ORDER BY masterType.masterTypeId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY eis_MasterType.masterTypeId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.idetronic.eis.model.MasterType"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.idetronic.eis.model.MasterType"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.idetronic.eis.model.MasterType"),
			true);
	public static long PARENTTYPE_COLUMN_BITMASK = 1L;
	public static long MASTERTYPEID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static MasterType toModel(MasterTypeSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		MasterType model = new MasterTypeImpl();

		model.setMasterTypeId(soapModel.getMasterTypeId());
		model.setMasterTypeName(soapModel.getMasterTypeName());
		model.setStatus(soapModel.getStatus());
		model.setParentType(soapModel.getParentType());
		model.setPageLabel(soapModel.getPageLabel());
		model.setNameLabel(soapModel.getNameLabel());
		model.setHasParent1(soapModel.getHasParent1());
		model.setParentId1(soapModel.getParentId1());
		model.setParentId2(soapModel.getParentId2());
		model.setHasParent2(soapModel.getHasParent2());
		model.setParent1Label(soapModel.getParent1Label());
		model.setParent2Label(soapModel.getParent2Label());
		model.setHasStatus1(soapModel.getHasStatus1());
		model.setHasStatus2(soapModel.getHasStatus2());
		model.setHasStatus3(soapModel.getHasStatus3());
		model.setHasStatus4(soapModel.getHasStatus4());
		model.setHasStatus5(soapModel.getHasStatus5());
		model.setStatus1Label(soapModel.getStatus1Label());
		model.setStatus2Label(soapModel.getStatus2Label());
		model.setStatus3Label(soapModel.getStatus3Label());
		model.setStatus4Label(soapModel.getStatus4Label());
		model.setStatus5Label(soapModel.getStatus5Label());
		model.setHasCode(soapModel.getHasCode());
		model.setCodeLabel(soapModel.getCodeLabel());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<MasterType> toModels(MasterTypeSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<MasterType> models = new ArrayList<MasterType>(soapModels.length);

		for (MasterTypeSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.idetronic.eis.model.MasterType"));

	public MasterTypeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _masterTypeId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMasterTypeId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _masterTypeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MasterType.class;
	}

	@Override
	public String getModelClassName() {
		return MasterType.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("masterTypeId", getMasterTypeId());
		attributes.put("masterTypeName", getMasterTypeName());
		attributes.put("status", getStatus());
		attributes.put("parentType", getParentType());
		attributes.put("pageLabel", getPageLabel());
		attributes.put("nameLabel", getNameLabel());
		attributes.put("hasParent1", getHasParent1());
		attributes.put("parentId1", getParentId1());
		attributes.put("parentId2", getParentId2());
		attributes.put("hasParent2", getHasParent2());
		attributes.put("parent1Label", getParent1Label());
		attributes.put("parent2Label", getParent2Label());
		attributes.put("hasStatus1", getHasStatus1());
		attributes.put("hasStatus2", getHasStatus2());
		attributes.put("hasStatus3", getHasStatus3());
		attributes.put("hasStatus4", getHasStatus4());
		attributes.put("hasStatus5", getHasStatus5());
		attributes.put("status1Label", getStatus1Label());
		attributes.put("status2Label", getStatus2Label());
		attributes.put("status3Label", getStatus3Label());
		attributes.put("status4Label", getStatus4Label());
		attributes.put("status5Label", getStatus5Label());
		attributes.put("hasCode", getHasCode());
		attributes.put("codeLabel", getCodeLabel());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long masterTypeId = (Long)attributes.get("masterTypeId");

		if (masterTypeId != null) {
			setMasterTypeId(masterTypeId);
		}

		String masterTypeName = (String)attributes.get("masterTypeName");

		if (masterTypeName != null) {
			setMasterTypeName(masterTypeName);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Boolean parentType = (Boolean)attributes.get("parentType");

		if (parentType != null) {
			setParentType(parentType);
		}

		String pageLabel = (String)attributes.get("pageLabel");

		if (pageLabel != null) {
			setPageLabel(pageLabel);
		}

		String nameLabel = (String)attributes.get("nameLabel");

		if (nameLabel != null) {
			setNameLabel(nameLabel);
		}

		Boolean hasParent1 = (Boolean)attributes.get("hasParent1");

		if (hasParent1 != null) {
			setHasParent1(hasParent1);
		}

		Long parentId1 = (Long)attributes.get("parentId1");

		if (parentId1 != null) {
			setParentId1(parentId1);
		}

		Long parentId2 = (Long)attributes.get("parentId2");

		if (parentId2 != null) {
			setParentId2(parentId2);
		}

		Boolean hasParent2 = (Boolean)attributes.get("hasParent2");

		if (hasParent2 != null) {
			setHasParent2(hasParent2);
		}

		String parent1Label = (String)attributes.get("parent1Label");

		if (parent1Label != null) {
			setParent1Label(parent1Label);
		}

		String parent2Label = (String)attributes.get("parent2Label");

		if (parent2Label != null) {
			setParent2Label(parent2Label);
		}

		Boolean hasStatus1 = (Boolean)attributes.get("hasStatus1");

		if (hasStatus1 != null) {
			setHasStatus1(hasStatus1);
		}

		Boolean hasStatus2 = (Boolean)attributes.get("hasStatus2");

		if (hasStatus2 != null) {
			setHasStatus2(hasStatus2);
		}

		Boolean hasStatus3 = (Boolean)attributes.get("hasStatus3");

		if (hasStatus3 != null) {
			setHasStatus3(hasStatus3);
		}

		Boolean hasStatus4 = (Boolean)attributes.get("hasStatus4");

		if (hasStatus4 != null) {
			setHasStatus4(hasStatus4);
		}

		Boolean hasStatus5 = (Boolean)attributes.get("hasStatus5");

		if (hasStatus5 != null) {
			setHasStatus5(hasStatus5);
		}

		String status1Label = (String)attributes.get("status1Label");

		if (status1Label != null) {
			setStatus1Label(status1Label);
		}

		String status2Label = (String)attributes.get("status2Label");

		if (status2Label != null) {
			setStatus2Label(status2Label);
		}

		String status3Label = (String)attributes.get("status3Label");

		if (status3Label != null) {
			setStatus3Label(status3Label);
		}

		String status4Label = (String)attributes.get("status4Label");

		if (status4Label != null) {
			setStatus4Label(status4Label);
		}

		String status5Label = (String)attributes.get("status5Label");

		if (status5Label != null) {
			setStatus5Label(status5Label);
		}

		Boolean hasCode = (Boolean)attributes.get("hasCode");

		if (hasCode != null) {
			setHasCode(hasCode);
		}

		String codeLabel = (String)attributes.get("codeLabel");

		if (codeLabel != null) {
			setCodeLabel(codeLabel);
		}
	}

	@JSON
	@Override
	public long getMasterTypeId() {
		return _masterTypeId;
	}

	@Override
	public void setMasterTypeId(long masterTypeId) {
		_masterTypeId = masterTypeId;
	}

	@JSON
	@Override
	public String getMasterTypeName() {
		if (_masterTypeName == null) {
			return StringPool.BLANK;
		}
		else {
			return _masterTypeName;
		}
	}

	@Override
	public void setMasterTypeName(String masterTypeName) {
		_masterTypeName = masterTypeName;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@JSON
	@Override
	public boolean getParentType() {
		return _parentType;
	}

	@Override
	public boolean isParentType() {
		return _parentType;
	}

	@Override
	public void setParentType(boolean parentType) {
		_columnBitmask |= PARENTTYPE_COLUMN_BITMASK;

		if (!_setOriginalParentType) {
			_setOriginalParentType = true;

			_originalParentType = _parentType;
		}

		_parentType = parentType;
	}

	public boolean getOriginalParentType() {
		return _originalParentType;
	}

	@JSON
	@Override
	public String getPageLabel() {
		if (_pageLabel == null) {
			return StringPool.BLANK;
		}
		else {
			return _pageLabel;
		}
	}

	@Override
	public void setPageLabel(String pageLabel) {
		_pageLabel = pageLabel;
	}

	@JSON
	@Override
	public String getNameLabel() {
		if (_nameLabel == null) {
			return StringPool.BLANK;
		}
		else {
			return _nameLabel;
		}
	}

	@Override
	public void setNameLabel(String nameLabel) {
		_nameLabel = nameLabel;
	}

	@JSON
	@Override
	public boolean getHasParent1() {
		return _hasParent1;
	}

	@Override
	public boolean isHasParent1() {
		return _hasParent1;
	}

	@Override
	public void setHasParent1(boolean hasParent1) {
		_hasParent1 = hasParent1;
	}

	@JSON
	@Override
	public long getParentId1() {
		return _parentId1;
	}

	@Override
	public void setParentId1(long parentId1) {
		_parentId1 = parentId1;
	}

	@JSON
	@Override
	public long getParentId2() {
		return _parentId2;
	}

	@Override
	public void setParentId2(long parentId2) {
		_parentId2 = parentId2;
	}

	@JSON
	@Override
	public boolean getHasParent2() {
		return _hasParent2;
	}

	@Override
	public boolean isHasParent2() {
		return _hasParent2;
	}

	@Override
	public void setHasParent2(boolean hasParent2) {
		_hasParent2 = hasParent2;
	}

	@JSON
	@Override
	public String getParent1Label() {
		if (_parent1Label == null) {
			return StringPool.BLANK;
		}
		else {
			return _parent1Label;
		}
	}

	@Override
	public void setParent1Label(String parent1Label) {
		_parent1Label = parent1Label;
	}

	@JSON
	@Override
	public String getParent2Label() {
		if (_parent2Label == null) {
			return StringPool.BLANK;
		}
		else {
			return _parent2Label;
		}
	}

	@Override
	public void setParent2Label(String parent2Label) {
		_parent2Label = parent2Label;
	}

	@JSON
	@Override
	public boolean getHasStatus1() {
		return _hasStatus1;
	}

	@Override
	public boolean isHasStatus1() {
		return _hasStatus1;
	}

	@Override
	public void setHasStatus1(boolean hasStatus1) {
		_hasStatus1 = hasStatus1;
	}

	@JSON
	@Override
	public boolean getHasStatus2() {
		return _hasStatus2;
	}

	@Override
	public boolean isHasStatus2() {
		return _hasStatus2;
	}

	@Override
	public void setHasStatus2(boolean hasStatus2) {
		_hasStatus2 = hasStatus2;
	}

	@JSON
	@Override
	public boolean getHasStatus3() {
		return _hasStatus3;
	}

	@Override
	public boolean isHasStatus3() {
		return _hasStatus3;
	}

	@Override
	public void setHasStatus3(boolean hasStatus3) {
		_hasStatus3 = hasStatus3;
	}

	@JSON
	@Override
	public boolean getHasStatus4() {
		return _hasStatus4;
	}

	@Override
	public boolean isHasStatus4() {
		return _hasStatus4;
	}

	@Override
	public void setHasStatus4(boolean hasStatus4) {
		_hasStatus4 = hasStatus4;
	}

	@JSON
	@Override
	public boolean getHasStatus5() {
		return _hasStatus5;
	}

	@Override
	public boolean isHasStatus5() {
		return _hasStatus5;
	}

	@Override
	public void setHasStatus5(boolean hasStatus5) {
		_hasStatus5 = hasStatus5;
	}

	@JSON
	@Override
	public String getStatus1Label() {
		if (_status1Label == null) {
			return StringPool.BLANK;
		}
		else {
			return _status1Label;
		}
	}

	@Override
	public void setStatus1Label(String status1Label) {
		_status1Label = status1Label;
	}

	@JSON
	@Override
	public String getStatus2Label() {
		if (_status2Label == null) {
			return StringPool.BLANK;
		}
		else {
			return _status2Label;
		}
	}

	@Override
	public void setStatus2Label(String status2Label) {
		_status2Label = status2Label;
	}

	@JSON
	@Override
	public String getStatus3Label() {
		if (_status3Label == null) {
			return StringPool.BLANK;
		}
		else {
			return _status3Label;
		}
	}

	@Override
	public void setStatus3Label(String status3Label) {
		_status3Label = status3Label;
	}

	@JSON
	@Override
	public String getStatus4Label() {
		if (_status4Label == null) {
			return StringPool.BLANK;
		}
		else {
			return _status4Label;
		}
	}

	@Override
	public void setStatus4Label(String status4Label) {
		_status4Label = status4Label;
	}

	@JSON
	@Override
	public String getStatus5Label() {
		if (_status5Label == null) {
			return StringPool.BLANK;
		}
		else {
			return _status5Label;
		}
	}

	@Override
	public void setStatus5Label(String status5Label) {
		_status5Label = status5Label;
	}

	@JSON
	@Override
	public boolean getHasCode() {
		return _hasCode;
	}

	@Override
	public boolean isHasCode() {
		return _hasCode;
	}

	@Override
	public void setHasCode(boolean hasCode) {
		_hasCode = hasCode;
	}

	@JSON
	@Override
	public String getCodeLabel() {
		if (_codeLabel == null) {
			return StringPool.BLANK;
		}
		else {
			return _codeLabel;
		}
	}

	@Override
	public void setCodeLabel(String codeLabel) {
		_codeLabel = codeLabel;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			MasterType.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MasterType toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (MasterType)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MasterTypeImpl masterTypeImpl = new MasterTypeImpl();

		masterTypeImpl.setMasterTypeId(getMasterTypeId());
		masterTypeImpl.setMasterTypeName(getMasterTypeName());
		masterTypeImpl.setStatus(getStatus());
		masterTypeImpl.setParentType(getParentType());
		masterTypeImpl.setPageLabel(getPageLabel());
		masterTypeImpl.setNameLabel(getNameLabel());
		masterTypeImpl.setHasParent1(getHasParent1());
		masterTypeImpl.setParentId1(getParentId1());
		masterTypeImpl.setParentId2(getParentId2());
		masterTypeImpl.setHasParent2(getHasParent2());
		masterTypeImpl.setParent1Label(getParent1Label());
		masterTypeImpl.setParent2Label(getParent2Label());
		masterTypeImpl.setHasStatus1(getHasStatus1());
		masterTypeImpl.setHasStatus2(getHasStatus2());
		masterTypeImpl.setHasStatus3(getHasStatus3());
		masterTypeImpl.setHasStatus4(getHasStatus4());
		masterTypeImpl.setHasStatus5(getHasStatus5());
		masterTypeImpl.setStatus1Label(getStatus1Label());
		masterTypeImpl.setStatus2Label(getStatus2Label());
		masterTypeImpl.setStatus3Label(getStatus3Label());
		masterTypeImpl.setStatus4Label(getStatus4Label());
		masterTypeImpl.setStatus5Label(getStatus5Label());
		masterTypeImpl.setHasCode(getHasCode());
		masterTypeImpl.setCodeLabel(getCodeLabel());

		masterTypeImpl.resetOriginalValues();

		return masterTypeImpl;
	}

	@Override
	public int compareTo(MasterType masterType) {
		long primaryKey = masterType.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof MasterType)) {
			return false;
		}

		MasterType masterType = (MasterType)obj;

		long primaryKey = masterType.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		MasterTypeModelImpl masterTypeModelImpl = this;

		masterTypeModelImpl._originalParentType = masterTypeModelImpl._parentType;

		masterTypeModelImpl._setOriginalParentType = false;

		masterTypeModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<MasterType> toCacheModel() {
		MasterTypeCacheModel masterTypeCacheModel = new MasterTypeCacheModel();

		masterTypeCacheModel.masterTypeId = getMasterTypeId();

		masterTypeCacheModel.masterTypeName = getMasterTypeName();

		String masterTypeName = masterTypeCacheModel.masterTypeName;

		if ((masterTypeName != null) && (masterTypeName.length() == 0)) {
			masterTypeCacheModel.masterTypeName = null;
		}

		masterTypeCacheModel.status = getStatus();

		masterTypeCacheModel.parentType = getParentType();

		masterTypeCacheModel.pageLabel = getPageLabel();

		String pageLabel = masterTypeCacheModel.pageLabel;

		if ((pageLabel != null) && (pageLabel.length() == 0)) {
			masterTypeCacheModel.pageLabel = null;
		}

		masterTypeCacheModel.nameLabel = getNameLabel();

		String nameLabel = masterTypeCacheModel.nameLabel;

		if ((nameLabel != null) && (nameLabel.length() == 0)) {
			masterTypeCacheModel.nameLabel = null;
		}

		masterTypeCacheModel.hasParent1 = getHasParent1();

		masterTypeCacheModel.parentId1 = getParentId1();

		masterTypeCacheModel.parentId2 = getParentId2();

		masterTypeCacheModel.hasParent2 = getHasParent2();

		masterTypeCacheModel.parent1Label = getParent1Label();

		String parent1Label = masterTypeCacheModel.parent1Label;

		if ((parent1Label != null) && (parent1Label.length() == 0)) {
			masterTypeCacheModel.parent1Label = null;
		}

		masterTypeCacheModel.parent2Label = getParent2Label();

		String parent2Label = masterTypeCacheModel.parent2Label;

		if ((parent2Label != null) && (parent2Label.length() == 0)) {
			masterTypeCacheModel.parent2Label = null;
		}

		masterTypeCacheModel.hasStatus1 = getHasStatus1();

		masterTypeCacheModel.hasStatus2 = getHasStatus2();

		masterTypeCacheModel.hasStatus3 = getHasStatus3();

		masterTypeCacheModel.hasStatus4 = getHasStatus4();

		masterTypeCacheModel.hasStatus5 = getHasStatus5();

		masterTypeCacheModel.status1Label = getStatus1Label();

		String status1Label = masterTypeCacheModel.status1Label;

		if ((status1Label != null) && (status1Label.length() == 0)) {
			masterTypeCacheModel.status1Label = null;
		}

		masterTypeCacheModel.status2Label = getStatus2Label();

		String status2Label = masterTypeCacheModel.status2Label;

		if ((status2Label != null) && (status2Label.length() == 0)) {
			masterTypeCacheModel.status2Label = null;
		}

		masterTypeCacheModel.status3Label = getStatus3Label();

		String status3Label = masterTypeCacheModel.status3Label;

		if ((status3Label != null) && (status3Label.length() == 0)) {
			masterTypeCacheModel.status3Label = null;
		}

		masterTypeCacheModel.status4Label = getStatus4Label();

		String status4Label = masterTypeCacheModel.status4Label;

		if ((status4Label != null) && (status4Label.length() == 0)) {
			masterTypeCacheModel.status4Label = null;
		}

		masterTypeCacheModel.status5Label = getStatus5Label();

		String status5Label = masterTypeCacheModel.status5Label;

		if ((status5Label != null) && (status5Label.length() == 0)) {
			masterTypeCacheModel.status5Label = null;
		}

		masterTypeCacheModel.hasCode = getHasCode();

		masterTypeCacheModel.codeLabel = getCodeLabel();

		String codeLabel = masterTypeCacheModel.codeLabel;

		if ((codeLabel != null) && (codeLabel.length() == 0)) {
			masterTypeCacheModel.codeLabel = null;
		}

		return masterTypeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(49);

		sb.append("{masterTypeId=");
		sb.append(getMasterTypeId());
		sb.append(", masterTypeName=");
		sb.append(getMasterTypeName());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", parentType=");
		sb.append(getParentType());
		sb.append(", pageLabel=");
		sb.append(getPageLabel());
		sb.append(", nameLabel=");
		sb.append(getNameLabel());
		sb.append(", hasParent1=");
		sb.append(getHasParent1());
		sb.append(", parentId1=");
		sb.append(getParentId1());
		sb.append(", parentId2=");
		sb.append(getParentId2());
		sb.append(", hasParent2=");
		sb.append(getHasParent2());
		sb.append(", parent1Label=");
		sb.append(getParent1Label());
		sb.append(", parent2Label=");
		sb.append(getParent2Label());
		sb.append(", hasStatus1=");
		sb.append(getHasStatus1());
		sb.append(", hasStatus2=");
		sb.append(getHasStatus2());
		sb.append(", hasStatus3=");
		sb.append(getHasStatus3());
		sb.append(", hasStatus4=");
		sb.append(getHasStatus4());
		sb.append(", hasStatus5=");
		sb.append(getHasStatus5());
		sb.append(", status1Label=");
		sb.append(getStatus1Label());
		sb.append(", status2Label=");
		sb.append(getStatus2Label());
		sb.append(", status3Label=");
		sb.append(getStatus3Label());
		sb.append(", status4Label=");
		sb.append(getStatus4Label());
		sb.append(", status5Label=");
		sb.append(getStatus5Label());
		sb.append(", hasCode=");
		sb.append(getHasCode());
		sb.append(", codeLabel=");
		sb.append(getCodeLabel());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(76);

		sb.append("<model><model-name>");
		sb.append("com.idetronic.eis.model.MasterType");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>masterTypeId</column-name><column-value><![CDATA[");
		sb.append(getMasterTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>masterTypeName</column-name><column-value><![CDATA[");
		sb.append(getMasterTypeName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentType</column-name><column-value><![CDATA[");
		sb.append(getParentType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pageLabel</column-name><column-value><![CDATA[");
		sb.append(getPageLabel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nameLabel</column-name><column-value><![CDATA[");
		sb.append(getNameLabel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hasParent1</column-name><column-value><![CDATA[");
		sb.append(getHasParent1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentId1</column-name><column-value><![CDATA[");
		sb.append(getParentId1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentId2</column-name><column-value><![CDATA[");
		sb.append(getParentId2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hasParent2</column-name><column-value><![CDATA[");
		sb.append(getHasParent2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parent1Label</column-name><column-value><![CDATA[");
		sb.append(getParent1Label());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parent2Label</column-name><column-value><![CDATA[");
		sb.append(getParent2Label());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hasStatus1</column-name><column-value><![CDATA[");
		sb.append(getHasStatus1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hasStatus2</column-name><column-value><![CDATA[");
		sb.append(getHasStatus2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hasStatus3</column-name><column-value><![CDATA[");
		sb.append(getHasStatus3());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hasStatus4</column-name><column-value><![CDATA[");
		sb.append(getHasStatus4());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hasStatus5</column-name><column-value><![CDATA[");
		sb.append(getHasStatus5());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status1Label</column-name><column-value><![CDATA[");
		sb.append(getStatus1Label());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status2Label</column-name><column-value><![CDATA[");
		sb.append(getStatus2Label());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status3Label</column-name><column-value><![CDATA[");
		sb.append(getStatus3Label());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status4Label</column-name><column-value><![CDATA[");
		sb.append(getStatus4Label());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status5Label</column-name><column-value><![CDATA[");
		sb.append(getStatus5Label());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hasCode</column-name><column-value><![CDATA[");
		sb.append(getHasCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>codeLabel</column-name><column-value><![CDATA[");
		sb.append(getCodeLabel());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = MasterType.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			MasterType.class
		};
	private long _masterTypeId;
	private String _masterTypeName;
	private int _status;
	private boolean _parentType;
	private boolean _originalParentType;
	private boolean _setOriginalParentType;
	private String _pageLabel;
	private String _nameLabel;
	private boolean _hasParent1;
	private long _parentId1;
	private long _parentId2;
	private boolean _hasParent2;
	private String _parent1Label;
	private String _parent2Label;
	private boolean _hasStatus1;
	private boolean _hasStatus2;
	private boolean _hasStatus3;
	private boolean _hasStatus4;
	private boolean _hasStatus5;
	private String _status1Label;
	private String _status2Label;
	private String _status3Label;
	private String _status4Label;
	private String _status5Label;
	private boolean _hasCode;
	private String _codeLabel;
	private long _columnBitmask;
	private MasterType _escapedModel;
}