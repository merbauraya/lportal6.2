/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.idetronic.eis.model.impl;

import com.idetronic.eis.model.Faculty;
import com.idetronic.eis.model.FacultyModel;
import com.idetronic.eis.model.FacultySoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Faculty service. Represents a row in the &quot;eis_Faculty&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.idetronic.eis.model.FacultyModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FacultyImpl}.
 * </p>
 *
 * @author Mazlan Mat
 * @see FacultyImpl
 * @see com.idetronic.eis.model.Faculty
 * @see com.idetronic.eis.model.FacultyModel
 * @generated
 */
@JSON(strict = true)
public class FacultyModelImpl extends BaseModelImpl<Faculty>
	implements FacultyModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a faculty model instance should use the {@link com.idetronic.eis.model.Faculty} interface instead.
	 */
	public static final String TABLE_NAME = "eis_Faculty";
	public static final Object[][] TABLE_COLUMNS = {
			{ "facultyId", Types.BIGINT },
			{ "facultyTypeId", Types.BIGINT },
			{ "facultyName", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table eis_Faculty (facultyId LONG not null primary key,facultyTypeId LONG,facultyName VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table eis_Faculty";
	public static final String ORDER_BY_JPQL = " ORDER BY faculty.facultyId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY eis_Faculty.facultyId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.idetronic.eis.model.Faculty"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.idetronic.eis.model.Faculty"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Faculty toModel(FacultySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Faculty model = new FacultyImpl();

		model.setFacultyId(soapModel.getFacultyId());
		model.setFacultyTypeId(soapModel.getFacultyTypeId());
		model.setFacultyName(soapModel.getFacultyName());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Faculty> toModels(FacultySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Faculty> models = new ArrayList<Faculty>(soapModels.length);

		for (FacultySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.idetronic.eis.model.Faculty"));

	public FacultyModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _facultyId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFacultyId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _facultyId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Faculty.class;
	}

	@Override
	public String getModelClassName() {
		return Faculty.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("facultyId", getFacultyId());
		attributes.put("facultyTypeId", getFacultyTypeId());
		attributes.put("facultyName", getFacultyName());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long facultyId = (Long)attributes.get("facultyId");

		if (facultyId != null) {
			setFacultyId(facultyId);
		}

		Long facultyTypeId = (Long)attributes.get("facultyTypeId");

		if (facultyTypeId != null) {
			setFacultyTypeId(facultyTypeId);
		}

		String facultyName = (String)attributes.get("facultyName");

		if (facultyName != null) {
			setFacultyName(facultyName);
		}
	}

	@JSON
	@Override
	public long getFacultyId() {
		return _facultyId;
	}

	@Override
	public void setFacultyId(long facultyId) {
		_facultyId = facultyId;
	}

	@JSON
	@Override
	public long getFacultyTypeId() {
		return _facultyTypeId;
	}

	@Override
	public void setFacultyTypeId(long facultyTypeId) {
		_facultyTypeId = facultyTypeId;
	}

	@JSON
	@Override
	public String getFacultyName() {
		if (_facultyName == null) {
			return StringPool.BLANK;
		}
		else {
			return _facultyName;
		}
	}

	@Override
	public void setFacultyName(String facultyName) {
		_facultyName = facultyName;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Faculty.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Faculty toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Faculty)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FacultyImpl facultyImpl = new FacultyImpl();

		facultyImpl.setFacultyId(getFacultyId());
		facultyImpl.setFacultyTypeId(getFacultyTypeId());
		facultyImpl.setFacultyName(getFacultyName());

		facultyImpl.resetOriginalValues();

		return facultyImpl;
	}

	@Override
	public int compareTo(Faculty faculty) {
		long primaryKey = faculty.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Faculty)) {
			return false;
		}

		Faculty faculty = (Faculty)obj;

		long primaryKey = faculty.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Faculty> toCacheModel() {
		FacultyCacheModel facultyCacheModel = new FacultyCacheModel();

		facultyCacheModel.facultyId = getFacultyId();

		facultyCacheModel.facultyTypeId = getFacultyTypeId();

		facultyCacheModel.facultyName = getFacultyName();

		String facultyName = facultyCacheModel.facultyName;

		if ((facultyName != null) && (facultyName.length() == 0)) {
			facultyCacheModel.facultyName = null;
		}

		return facultyCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{facultyId=");
		sb.append(getFacultyId());
		sb.append(", facultyTypeId=");
		sb.append(getFacultyTypeId());
		sb.append(", facultyName=");
		sb.append(getFacultyName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.idetronic.eis.model.Faculty");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>facultyId</column-name><column-value><![CDATA[");
		sb.append(getFacultyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>facultyTypeId</column-name><column-value><![CDATA[");
		sb.append(getFacultyTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>facultyName</column-name><column-value><![CDATA[");
		sb.append(getFacultyName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Faculty.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Faculty.class
		};
	private long _facultyId;
	private long _facultyTypeId;
	private String _facultyName;
	private Faculty _escapedModel;
}