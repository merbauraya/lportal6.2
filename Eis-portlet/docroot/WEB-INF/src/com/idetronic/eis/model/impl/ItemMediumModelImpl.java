/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.idetronic.eis.model.impl;

import com.idetronic.eis.model.ItemMedium;
import com.idetronic.eis.model.ItemMediumModel;
import com.idetronic.eis.model.ItemMediumSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ItemMedium service. Represents a row in the &quot;eis_ItemMedium&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.idetronic.eis.model.ItemMediumModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ItemMediumImpl}.
 * </p>
 *
 * @author Mazlan Mat
 * @see ItemMediumImpl
 * @see com.idetronic.eis.model.ItemMedium
 * @see com.idetronic.eis.model.ItemMediumModel
 * @generated
 */
@JSON(strict = true)
public class ItemMediumModelImpl extends BaseModelImpl<ItemMedium>
	implements ItemMediumModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a item medium model instance should use the {@link com.idetronic.eis.model.ItemMedium} interface instead.
	 */
	public static final String TABLE_NAME = "eis_ItemMedium";
	public static final Object[][] TABLE_COLUMNS = {
			{ "itemMediumId", Types.BIGINT },
			{ "itemMediumName", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table eis_ItemMedium (itemMediumId LONG not null primary key,itemMediumName VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table eis_ItemMedium";
	public static final String ORDER_BY_JPQL = " ORDER BY itemMedium.itemMediumId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY eis_ItemMedium.itemMediumId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.idetronic.eis.model.ItemMedium"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.idetronic.eis.model.ItemMedium"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ItemMedium toModel(ItemMediumSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ItemMedium model = new ItemMediumImpl();

		model.setItemMediumId(soapModel.getItemMediumId());
		model.setItemMediumName(soapModel.getItemMediumName());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ItemMedium> toModels(ItemMediumSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ItemMedium> models = new ArrayList<ItemMedium>(soapModels.length);

		for (ItemMediumSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.idetronic.eis.model.ItemMedium"));

	public ItemMediumModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _itemMediumId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setItemMediumId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _itemMediumId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ItemMedium.class;
	}

	@Override
	public String getModelClassName() {
		return ItemMedium.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("itemMediumId", getItemMediumId());
		attributes.put("itemMediumName", getItemMediumName());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long itemMediumId = (Long)attributes.get("itemMediumId");

		if (itemMediumId != null) {
			setItemMediumId(itemMediumId);
		}

		String itemMediumName = (String)attributes.get("itemMediumName");

		if (itemMediumName != null) {
			setItemMediumName(itemMediumName);
		}
	}

	@JSON
	@Override
	public long getItemMediumId() {
		return _itemMediumId;
	}

	@Override
	public void setItemMediumId(long itemMediumId) {
		_itemMediumId = itemMediumId;
	}

	@JSON
	@Override
	public String getItemMediumName() {
		if (_itemMediumName == null) {
			return StringPool.BLANK;
		}
		else {
			return _itemMediumName;
		}
	}

	@Override
	public void setItemMediumName(String itemMediumName) {
		_itemMediumName = itemMediumName;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ItemMedium.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ItemMedium toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ItemMedium)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ItemMediumImpl itemMediumImpl = new ItemMediumImpl();

		itemMediumImpl.setItemMediumId(getItemMediumId());
		itemMediumImpl.setItemMediumName(getItemMediumName());

		itemMediumImpl.resetOriginalValues();

		return itemMediumImpl;
	}

	@Override
	public int compareTo(ItemMedium itemMedium) {
		long primaryKey = itemMedium.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ItemMedium)) {
			return false;
		}

		ItemMedium itemMedium = (ItemMedium)obj;

		long primaryKey = itemMedium.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<ItemMedium> toCacheModel() {
		ItemMediumCacheModel itemMediumCacheModel = new ItemMediumCacheModel();

		itemMediumCacheModel.itemMediumId = getItemMediumId();

		itemMediumCacheModel.itemMediumName = getItemMediumName();

		String itemMediumName = itemMediumCacheModel.itemMediumName;

		if ((itemMediumName != null) && (itemMediumName.length() == 0)) {
			itemMediumCacheModel.itemMediumName = null;
		}

		return itemMediumCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{itemMediumId=");
		sb.append(getItemMediumId());
		sb.append(", itemMediumName=");
		sb.append(getItemMediumName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("com.idetronic.eis.model.ItemMedium");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>itemMediumId</column-name><column-value><![CDATA[");
		sb.append(getItemMediumId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemMediumName</column-name><column-value><![CDATA[");
		sb.append(getItemMediumName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ItemMedium.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ItemMedium.class
		};
	private long _itemMediumId;
	private String _itemMediumName;
	private ItemMedium _escapedModel;
}