/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.idetronic.eis.model.impl;

import com.idetronic.eis.model.Loan;
import com.idetronic.eis.model.LoanModel;
import com.idetronic.eis.model.LoanSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Loan service. Represents a row in the &quot;eis_Loan&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.idetronic.eis.model.LoanModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LoanImpl}.
 * </p>
 *
 * @author Mazlan Mat
 * @see LoanImpl
 * @see com.idetronic.eis.model.Loan
 * @see com.idetronic.eis.model.LoanModel
 * @generated
 */
@JSON(strict = true)
public class LoanModelImpl extends BaseModelImpl<Loan> implements LoanModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a loan model instance should use the {@link com.idetronic.eis.model.Loan} interface instead.
	 */
	public static final String TABLE_NAME = "eis_Loan";
	public static final Object[][] TABLE_COLUMNS = {
			{ "loanEntryId", Types.BIGINT },
			{ "libraryId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "period", Types.VARCHAR },
			{ "stateId", Types.BIGINT },
			{ "libraryTypeId", Types.BIGINT },
			{ "periodYear", Types.INTEGER },
			{ "periodMonth", Types.INTEGER },
			{ "createDate", Types.TIMESTAMP },
			{ "memberCategoryId", Types.BIGINT },
			{ "value", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table eis_Loan (loanEntryId LONG not null primary key,libraryId LONG,userId LONG,userName VARCHAR(75) null,period VARCHAR(10) null,stateId LONG,libraryTypeId LONG,periodYear INTEGER,periodMonth INTEGER,createDate DATE null,memberCategoryId LONG,value INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table eis_Loan";
	public static final String ORDER_BY_JPQL = " ORDER BY loan.loanEntryId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY eis_Loan.loanEntryId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.idetronic.eis.model.Loan"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.idetronic.eis.model.Loan"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.idetronic.eis.model.Loan"),
			true);
	public static long LIBRARYID_COLUMN_BITMASK = 1L;
	public static long PERIOD_COLUMN_BITMASK = 2L;
	public static long LOANENTRYID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Loan toModel(LoanSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Loan model = new LoanImpl();

		model.setLoanEntryId(soapModel.getLoanEntryId());
		model.setLibraryId(soapModel.getLibraryId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setPeriod(soapModel.getPeriod());
		model.setStateId(soapModel.getStateId());
		model.setLibraryTypeId(soapModel.getLibraryTypeId());
		model.setPeriodYear(soapModel.getPeriodYear());
		model.setPeriodMonth(soapModel.getPeriodMonth());
		model.setCreateDate(soapModel.getCreateDate());
		model.setMemberCategoryId(soapModel.getMemberCategoryId());
		model.setValue(soapModel.getValue());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Loan> toModels(LoanSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Loan> models = new ArrayList<Loan>(soapModels.length);

		for (LoanSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.idetronic.eis.model.Loan"));

	public LoanModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _loanEntryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLoanEntryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _loanEntryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Loan.class;
	}

	@Override
	public String getModelClassName() {
		return Loan.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("loanEntryId", getLoanEntryId());
		attributes.put("libraryId", getLibraryId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("period", getPeriod());
		attributes.put("stateId", getStateId());
		attributes.put("libraryTypeId", getLibraryTypeId());
		attributes.put("periodYear", getPeriodYear());
		attributes.put("periodMonth", getPeriodMonth());
		attributes.put("createDate", getCreateDate());
		attributes.put("memberCategoryId", getMemberCategoryId());
		attributes.put("value", getValue());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long loanEntryId = (Long)attributes.get("loanEntryId");

		if (loanEntryId != null) {
			setLoanEntryId(loanEntryId);
		}

		Long libraryId = (Long)attributes.get("libraryId");

		if (libraryId != null) {
			setLibraryId(libraryId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		String period = (String)attributes.get("period");

		if (period != null) {
			setPeriod(period);
		}

		Long stateId = (Long)attributes.get("stateId");

		if (stateId != null) {
			setStateId(stateId);
		}

		Long libraryTypeId = (Long)attributes.get("libraryTypeId");

		if (libraryTypeId != null) {
			setLibraryTypeId(libraryTypeId);
		}

		Integer periodYear = (Integer)attributes.get("periodYear");

		if (periodYear != null) {
			setPeriodYear(periodYear);
		}

		Integer periodMonth = (Integer)attributes.get("periodMonth");

		if (periodMonth != null) {
			setPeriodMonth(periodMonth);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Long memberCategoryId = (Long)attributes.get("memberCategoryId");

		if (memberCategoryId != null) {
			setMemberCategoryId(memberCategoryId);
		}

		Integer value = (Integer)attributes.get("value");

		if (value != null) {
			setValue(value);
		}
	}

	@JSON
	@Override
	public long getLoanEntryId() {
		return _loanEntryId;
	}

	@Override
	public void setLoanEntryId(long loanEntryId) {
		_loanEntryId = loanEntryId;
	}

	@JSON
	@Override
	public long getLibraryId() {
		return _libraryId;
	}

	@Override
	public void setLibraryId(long libraryId) {
		_columnBitmask |= LIBRARYID_COLUMN_BITMASK;

		if (!_setOriginalLibraryId) {
			_setOriginalLibraryId = true;

			_originalLibraryId = _libraryId;
		}

		_libraryId = libraryId;
	}

	public long getOriginalLibraryId() {
		return _originalLibraryId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public String getPeriod() {
		if (_period == null) {
			return StringPool.BLANK;
		}
		else {
			return _period;
		}
	}

	@Override
	public void setPeriod(String period) {
		_columnBitmask |= PERIOD_COLUMN_BITMASK;

		if (_originalPeriod == null) {
			_originalPeriod = _period;
		}

		_period = period;
	}

	public String getOriginalPeriod() {
		return GetterUtil.getString(_originalPeriod);
	}

	@JSON
	@Override
	public long getStateId() {
		return _stateId;
	}

	@Override
	public void setStateId(long stateId) {
		_stateId = stateId;
	}

	@JSON
	@Override
	public long getLibraryTypeId() {
		return _libraryTypeId;
	}

	@Override
	public void setLibraryTypeId(long libraryTypeId) {
		_libraryTypeId = libraryTypeId;
	}

	@JSON
	@Override
	public int getPeriodYear() {
		return _periodYear;
	}

	@Override
	public void setPeriodYear(int periodYear) {
		_periodYear = periodYear;
	}

	@JSON
	@Override
	public int getPeriodMonth() {
		return _periodMonth;
	}

	@Override
	public void setPeriodMonth(int periodMonth) {
		_periodMonth = periodMonth;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public long getMemberCategoryId() {
		return _memberCategoryId;
	}

	@Override
	public void setMemberCategoryId(long memberCategoryId) {
		_memberCategoryId = memberCategoryId;
	}

	@JSON
	@Override
	public int getValue() {
		return _value;
	}

	@Override
	public void setValue(int value) {
		_value = value;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Loan.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Loan toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Loan)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LoanImpl loanImpl = new LoanImpl();

		loanImpl.setLoanEntryId(getLoanEntryId());
		loanImpl.setLibraryId(getLibraryId());
		loanImpl.setUserId(getUserId());
		loanImpl.setUserName(getUserName());
		loanImpl.setPeriod(getPeriod());
		loanImpl.setStateId(getStateId());
		loanImpl.setLibraryTypeId(getLibraryTypeId());
		loanImpl.setPeriodYear(getPeriodYear());
		loanImpl.setPeriodMonth(getPeriodMonth());
		loanImpl.setCreateDate(getCreateDate());
		loanImpl.setMemberCategoryId(getMemberCategoryId());
		loanImpl.setValue(getValue());

		loanImpl.resetOriginalValues();

		return loanImpl;
	}

	@Override
	public int compareTo(Loan loan) {
		long primaryKey = loan.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Loan)) {
			return false;
		}

		Loan loan = (Loan)obj;

		long primaryKey = loan.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		LoanModelImpl loanModelImpl = this;

		loanModelImpl._originalLibraryId = loanModelImpl._libraryId;

		loanModelImpl._setOriginalLibraryId = false;

		loanModelImpl._originalPeriod = loanModelImpl._period;

		loanModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Loan> toCacheModel() {
		LoanCacheModel loanCacheModel = new LoanCacheModel();

		loanCacheModel.loanEntryId = getLoanEntryId();

		loanCacheModel.libraryId = getLibraryId();

		loanCacheModel.userId = getUserId();

		loanCacheModel.userName = getUserName();

		String userName = loanCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			loanCacheModel.userName = null;
		}

		loanCacheModel.period = getPeriod();

		String period = loanCacheModel.period;

		if ((period != null) && (period.length() == 0)) {
			loanCacheModel.period = null;
		}

		loanCacheModel.stateId = getStateId();

		loanCacheModel.libraryTypeId = getLibraryTypeId();

		loanCacheModel.periodYear = getPeriodYear();

		loanCacheModel.periodMonth = getPeriodMonth();

		Date createDate = getCreateDate();

		if (createDate != null) {
			loanCacheModel.createDate = createDate.getTime();
		}
		else {
			loanCacheModel.createDate = Long.MIN_VALUE;
		}

		loanCacheModel.memberCategoryId = getMemberCategoryId();

		loanCacheModel.value = getValue();

		return loanCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{loanEntryId=");
		sb.append(getLoanEntryId());
		sb.append(", libraryId=");
		sb.append(getLibraryId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", period=");
		sb.append(getPeriod());
		sb.append(", stateId=");
		sb.append(getStateId());
		sb.append(", libraryTypeId=");
		sb.append(getLibraryTypeId());
		sb.append(", periodYear=");
		sb.append(getPeriodYear());
		sb.append(", periodMonth=");
		sb.append(getPeriodMonth());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", memberCategoryId=");
		sb.append(getMemberCategoryId());
		sb.append(", value=");
		sb.append(getValue());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("com.idetronic.eis.model.Loan");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>loanEntryId</column-name><column-value><![CDATA[");
		sb.append(getLoanEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>libraryId</column-name><column-value><![CDATA[");
		sb.append(getLibraryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>period</column-name><column-value><![CDATA[");
		sb.append(getPeriod());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stateId</column-name><column-value><![CDATA[");
		sb.append(getStateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>libraryTypeId</column-name><column-value><![CDATA[");
		sb.append(getLibraryTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>periodYear</column-name><column-value><![CDATA[");
		sb.append(getPeriodYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>periodMonth</column-name><column-value><![CDATA[");
		sb.append(getPeriodMonth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>memberCategoryId</column-name><column-value><![CDATA[");
		sb.append(getMemberCategoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>value</column-name><column-value><![CDATA[");
		sb.append(getValue());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Loan.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Loan.class };
	private long _loanEntryId;
	private long _libraryId;
	private long _originalLibraryId;
	private boolean _setOriginalLibraryId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private String _period;
	private String _originalPeriod;
	private long _stateId;
	private long _libraryTypeId;
	private int _periodYear;
	private int _periodMonth;
	private Date _createDate;
	private long _memberCategoryId;
	private int _value;
	private long _columnBitmask;
	private Loan _escapedModel;
}