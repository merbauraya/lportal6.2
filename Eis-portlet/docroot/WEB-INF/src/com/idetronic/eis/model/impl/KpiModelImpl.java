/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.idetronic.eis.model.impl;

import com.idetronic.eis.model.Kpi;
import com.idetronic.eis.model.KpiModel;
import com.idetronic.eis.model.KpiSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Kpi service. Represents a row in the &quot;eis_Kpi&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.idetronic.eis.model.KpiModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link KpiImpl}.
 * </p>
 *
 * @author Mazlan Mat
 * @see KpiImpl
 * @see com.idetronic.eis.model.Kpi
 * @see com.idetronic.eis.model.KpiModel
 * @generated
 */
@JSON(strict = true)
public class KpiModelImpl extends BaseModelImpl<Kpi> implements KpiModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a kpi model instance should use the {@link com.idetronic.eis.model.Kpi} interface instead.
	 */
	public static final String TABLE_NAME = "eis_Kpi";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "key_", Types.VARCHAR },
			{ "kpiType", Types.INTEGER },
			{ "value", Types.INTEGER },
			{ "description", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table eis_Kpi (id_ LONG not null primary key,key_ VARCHAR(30) null,kpiType INTEGER,value INTEGER,description VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table eis_Kpi";
	public static final String ORDER_BY_JPQL = " ORDER BY kpi.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY eis_Kpi.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.idetronic.eis.model.Kpi"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.idetronic.eis.model.Kpi"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.idetronic.eis.model.Kpi"),
			true);
	public static long KEY_COLUMN_BITMASK = 1L;
	public static long ID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Kpi toModel(KpiSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Kpi model = new KpiImpl();

		model.setId(soapModel.getId());
		model.setKey(soapModel.getKey());
		model.setKpiType(soapModel.getKpiType());
		model.setValue(soapModel.getValue());
		model.setDescription(soapModel.getDescription());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Kpi> toModels(KpiSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Kpi> models = new ArrayList<Kpi>(soapModels.length);

		for (KpiSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.idetronic.eis.model.Kpi"));

	public KpiModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Kpi.class;
	}

	@Override
	public String getModelClassName() {
		return Kpi.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("key", getKey());
		attributes.put("kpiType", getKpiType());
		attributes.put("value", getValue());
		attributes.put("description", getDescription());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String key = (String)attributes.get("key");

		if (key != null) {
			setKey(key);
		}

		Integer kpiType = (Integer)attributes.get("kpiType");

		if (kpiType != null) {
			setKpiType(kpiType);
		}

		Integer value = (Integer)attributes.get("value");

		if (value != null) {
			setValue(value);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public String getKey() {
		if (_key == null) {
			return StringPool.BLANK;
		}
		else {
			return _key;
		}
	}

	@Override
	public void setKey(String key) {
		_columnBitmask |= KEY_COLUMN_BITMASK;

		if (_originalKey == null) {
			_originalKey = _key;
		}

		_key = key;
	}

	public String getOriginalKey() {
		return GetterUtil.getString(_originalKey);
	}

	@JSON
	@Override
	public int getKpiType() {
		return _kpiType;
	}

	@Override
	public void setKpiType(int kpiType) {
		_kpiType = kpiType;
	}

	@JSON
	@Override
	public int getValue() {
		return _value;
	}

	@Override
	public void setValue(int value) {
		_value = value;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Kpi.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Kpi toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Kpi)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		KpiImpl kpiImpl = new KpiImpl();

		kpiImpl.setId(getId());
		kpiImpl.setKey(getKey());
		kpiImpl.setKpiType(getKpiType());
		kpiImpl.setValue(getValue());
		kpiImpl.setDescription(getDescription());

		kpiImpl.resetOriginalValues();

		return kpiImpl;
	}

	@Override
	public int compareTo(Kpi kpi) {
		long primaryKey = kpi.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Kpi)) {
			return false;
		}

		Kpi kpi = (Kpi)obj;

		long primaryKey = kpi.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		KpiModelImpl kpiModelImpl = this;

		kpiModelImpl._originalKey = kpiModelImpl._key;

		kpiModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Kpi> toCacheModel() {
		KpiCacheModel kpiCacheModel = new KpiCacheModel();

		kpiCacheModel.id = getId();

		kpiCacheModel.key = getKey();

		String key = kpiCacheModel.key;

		if ((key != null) && (key.length() == 0)) {
			kpiCacheModel.key = null;
		}

		kpiCacheModel.kpiType = getKpiType();

		kpiCacheModel.value = getValue();

		kpiCacheModel.description = getDescription();

		String description = kpiCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			kpiCacheModel.description = null;
		}

		return kpiCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", key=");
		sb.append(getKey());
		sb.append(", kpiType=");
		sb.append(getKpiType());
		sb.append(", value=");
		sb.append(getValue());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.idetronic.eis.model.Kpi");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>key</column-name><column-value><![CDATA[");
		sb.append(getKey());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>kpiType</column-name><column-value><![CDATA[");
		sb.append(getKpiType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>value</column-name><column-value><![CDATA[");
		sb.append(getValue());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Kpi.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Kpi.class };
	private long _id;
	private String _key;
	private String _originalKey;
	private int _kpiType;
	private int _value;
	private String _description;
	private long _columnBitmask;
	private Kpi _escapedModel;
}