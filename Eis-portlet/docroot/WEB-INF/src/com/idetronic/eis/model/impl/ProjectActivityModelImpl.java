/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.idetronic.eis.model.impl;

import com.idetronic.eis.model.ProjectActivity;
import com.idetronic.eis.model.ProjectActivityModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ProjectActivity service. Represents a row in the &quot;eis_ProjectActivity&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.idetronic.eis.model.ProjectActivityModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProjectActivityImpl}.
 * </p>
 *
 * @author Mazlan Mat
 * @see ProjectActivityImpl
 * @see com.idetronic.eis.model.ProjectActivity
 * @see com.idetronic.eis.model.ProjectActivityModel
 * @generated
 */
public class ProjectActivityModelImpl extends BaseModelImpl<ProjectActivity>
	implements ProjectActivityModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a project activity model instance should use the {@link com.idetronic.eis.model.ProjectActivity} interface instead.
	 */
	public static final String TABLE_NAME = "eis_ProjectActivity";
	public static final Object[][] TABLE_COLUMNS = {
			{ "projectActivityId", Types.BIGINT },
			{ "strategyId", Types.BIGINT },
			{ "activityName", Types.VARCHAR },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "startDate", Types.TIMESTAMP },
			{ "endDate", Types.TIMESTAMP },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "startMonth", Types.INTEGER },
			{ "startYear", Types.INTEGER },
			{ "startMonthName", Types.VARCHAR },
			{ "endMonth", Types.INTEGER },
			{ "endYear", Types.INTEGER },
			{ "endMonthName", Types.VARCHAR },
			{ "progress", Types.INTEGER },
			{ "status", Types.INTEGER },
			{ "progressStatus", Types.INTEGER },
			{ "completionDate", Types.TIMESTAMP },
			{ "resourceName", Types.VARCHAR },
			{ "resourceType", Types.VARCHAR },
			{ "remark", Types.CLOB }
		};
	public static final String TABLE_SQL_CREATE = "create table eis_ProjectActivity (projectActivityId LONG not null primary key,strategyId LONG,activityName VARCHAR(150) null,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,startDate DATE null,endDate DATE null,createDate DATE null,modifiedDate DATE null,startMonth INTEGER,startYear INTEGER,startMonthName VARCHAR(20) null,endMonth INTEGER,endYear INTEGER,endMonthName VARCHAR(20) null,progress INTEGER,status INTEGER,progressStatus INTEGER,completionDate DATE null,resourceName VARCHAR(75) null,resourceType VARCHAR(75) null,remark TEXT null)";
	public static final String TABLE_SQL_DROP = "drop table eis_ProjectActivity";
	public static final String ORDER_BY_JPQL = " ORDER BY projectActivity.startDate ASC";
	public static final String ORDER_BY_SQL = " ORDER BY eis_ProjectActivity.startDate ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.idetronic.eis.model.ProjectActivity"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.idetronic.eis.model.ProjectActivity"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.idetronic.eis.model.ProjectActivity"),
			true);
	public static long STRATEGYID_COLUMN_BITMASK = 1L;
	public static long STARTDATE_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.idetronic.eis.model.ProjectActivity"));

	public ProjectActivityModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _projectActivityId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setProjectActivityId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _projectActivityId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ProjectActivity.class;
	}

	@Override
	public String getModelClassName() {
		return ProjectActivity.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("projectActivityId", getProjectActivityId());
		attributes.put("strategyId", getStrategyId());
		attributes.put("activityName", getActivityName());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("startDate", getStartDate());
		attributes.put("endDate", getEndDate());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("startMonth", getStartMonth());
		attributes.put("startYear", getStartYear());
		attributes.put("startMonthName", getStartMonthName());
		attributes.put("endMonth", getEndMonth());
		attributes.put("endYear", getEndYear());
		attributes.put("endMonthName", getEndMonthName());
		attributes.put("progress", getProgress());
		attributes.put("status", getStatus());
		attributes.put("progressStatus", getProgressStatus());
		attributes.put("completionDate", getCompletionDate());
		attributes.put("resourceName", getResourceName());
		attributes.put("resourceType", getResourceType());
		attributes.put("remark", getRemark());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long projectActivityId = (Long)attributes.get("projectActivityId");

		if (projectActivityId != null) {
			setProjectActivityId(projectActivityId);
		}

		Long strategyId = (Long)attributes.get("strategyId");

		if (strategyId != null) {
			setStrategyId(strategyId);
		}

		String activityName = (String)attributes.get("activityName");

		if (activityName != null) {
			setActivityName(activityName);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date startDate = (Date)attributes.get("startDate");

		if (startDate != null) {
			setStartDate(startDate);
		}

		Date endDate = (Date)attributes.get("endDate");

		if (endDate != null) {
			setEndDate(endDate);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Integer startMonth = (Integer)attributes.get("startMonth");

		if (startMonth != null) {
			setStartMonth(startMonth);
		}

		Integer startYear = (Integer)attributes.get("startYear");

		if (startYear != null) {
			setStartYear(startYear);
		}

		String startMonthName = (String)attributes.get("startMonthName");

		if (startMonthName != null) {
			setStartMonthName(startMonthName);
		}

		Integer endMonth = (Integer)attributes.get("endMonth");

		if (endMonth != null) {
			setEndMonth(endMonth);
		}

		Integer endYear = (Integer)attributes.get("endYear");

		if (endYear != null) {
			setEndYear(endYear);
		}

		String endMonthName = (String)attributes.get("endMonthName");

		if (endMonthName != null) {
			setEndMonthName(endMonthName);
		}

		Integer progress = (Integer)attributes.get("progress");

		if (progress != null) {
			setProgress(progress);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Integer progressStatus = (Integer)attributes.get("progressStatus");

		if (progressStatus != null) {
			setProgressStatus(progressStatus);
		}

		Date completionDate = (Date)attributes.get("completionDate");

		if (completionDate != null) {
			setCompletionDate(completionDate);
		}

		String resourceName = (String)attributes.get("resourceName");

		if (resourceName != null) {
			setResourceName(resourceName);
		}

		String resourceType = (String)attributes.get("resourceType");

		if (resourceType != null) {
			setResourceType(resourceType);
		}

		String remark = (String)attributes.get("remark");

		if (remark != null) {
			setRemark(remark);
		}
	}

	@Override
	public long getProjectActivityId() {
		return _projectActivityId;
	}

	@Override
	public void setProjectActivityId(long projectActivityId) {
		_projectActivityId = projectActivityId;
	}

	@Override
	public long getStrategyId() {
		return _strategyId;
	}

	@Override
	public void setStrategyId(long strategyId) {
		_columnBitmask |= STRATEGYID_COLUMN_BITMASK;

		if (!_setOriginalStrategyId) {
			_setOriginalStrategyId = true;

			_originalStrategyId = _strategyId;
		}

		_strategyId = strategyId;
	}

	public long getOriginalStrategyId() {
		return _originalStrategyId;
	}

	@Override
	public String getActivityName() {
		if (_activityName == null) {
			return StringPool.BLANK;
		}
		else {
			return _activityName;
		}
	}

	@Override
	public void setActivityName(String activityName) {
		_activityName = activityName;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		_columnBitmask = -1L;

		_startDate = startDate;
	}

	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		_endDate = endDate;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public int getStartMonth() {
		return _startMonth;
	}

	@Override
	public void setStartMonth(int startMonth) {
		_startMonth = startMonth;
	}

	@Override
	public int getStartYear() {
		return _startYear;
	}

	@Override
	public void setStartYear(int startYear) {
		_startYear = startYear;
	}

	@Override
	public String getStartMonthName() {
		if (_startMonthName == null) {
			return StringPool.BLANK;
		}
		else {
			return _startMonthName;
		}
	}

	@Override
	public void setStartMonthName(String startMonthName) {
		_startMonthName = startMonthName;
	}

	@Override
	public int getEndMonth() {
		return _endMonth;
	}

	@Override
	public void setEndMonth(int endMonth) {
		_endMonth = endMonth;
	}

	@Override
	public int getEndYear() {
		return _endYear;
	}

	@Override
	public void setEndYear(int endYear) {
		_endYear = endYear;
	}

	@Override
	public String getEndMonthName() {
		if (_endMonthName == null) {
			return StringPool.BLANK;
		}
		else {
			return _endMonthName;
		}
	}

	@Override
	public void setEndMonthName(String endMonthName) {
		_endMonthName = endMonthName;
	}

	@Override
	public int getProgress() {
		return _progress;
	}

	@Override
	public void setProgress(int progress) {
		_progress = progress;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@Override
	public int getProgressStatus() {
		return _progressStatus;
	}

	@Override
	public void setProgressStatus(int progressStatus) {
		_progressStatus = progressStatus;
	}

	@Override
	public Date getCompletionDate() {
		return _completionDate;
	}

	@Override
	public void setCompletionDate(Date completionDate) {
		_completionDate = completionDate;
	}

	@Override
	public String getResourceName() {
		if (_resourceName == null) {
			return StringPool.BLANK;
		}
		else {
			return _resourceName;
		}
	}

	@Override
	public void setResourceName(String resourceName) {
		_resourceName = resourceName;
	}

	@Override
	public String getResourceType() {
		if (_resourceType == null) {
			return StringPool.BLANK;
		}
		else {
			return _resourceType;
		}
	}

	@Override
	public void setResourceType(String resourceType) {
		_resourceType = resourceType;
	}

	@Override
	public String getRemark() {
		if (_remark == null) {
			return StringPool.BLANK;
		}
		else {
			return _remark;
		}
	}

	@Override
	public void setRemark(String remark) {
		_remark = remark;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			ProjectActivity.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ProjectActivity toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ProjectActivity)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProjectActivityImpl projectActivityImpl = new ProjectActivityImpl();

		projectActivityImpl.setProjectActivityId(getProjectActivityId());
		projectActivityImpl.setStrategyId(getStrategyId());
		projectActivityImpl.setActivityName(getActivityName());
		projectActivityImpl.setGroupId(getGroupId());
		projectActivityImpl.setCompanyId(getCompanyId());
		projectActivityImpl.setUserId(getUserId());
		projectActivityImpl.setUserName(getUserName());
		projectActivityImpl.setStartDate(getStartDate());
		projectActivityImpl.setEndDate(getEndDate());
		projectActivityImpl.setCreateDate(getCreateDate());
		projectActivityImpl.setModifiedDate(getModifiedDate());
		projectActivityImpl.setStartMonth(getStartMonth());
		projectActivityImpl.setStartYear(getStartYear());
		projectActivityImpl.setStartMonthName(getStartMonthName());
		projectActivityImpl.setEndMonth(getEndMonth());
		projectActivityImpl.setEndYear(getEndYear());
		projectActivityImpl.setEndMonthName(getEndMonthName());
		projectActivityImpl.setProgress(getProgress());
		projectActivityImpl.setStatus(getStatus());
		projectActivityImpl.setProgressStatus(getProgressStatus());
		projectActivityImpl.setCompletionDate(getCompletionDate());
		projectActivityImpl.setResourceName(getResourceName());
		projectActivityImpl.setResourceType(getResourceType());
		projectActivityImpl.setRemark(getRemark());

		projectActivityImpl.resetOriginalValues();

		return projectActivityImpl;
	}

	@Override
	public int compareTo(ProjectActivity projectActivity) {
		int value = 0;

		value = DateUtil.compareTo(getStartDate(),
				projectActivity.getStartDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ProjectActivity)) {
			return false;
		}

		ProjectActivity projectActivity = (ProjectActivity)obj;

		long primaryKey = projectActivity.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ProjectActivityModelImpl projectActivityModelImpl = this;

		projectActivityModelImpl._originalStrategyId = projectActivityModelImpl._strategyId;

		projectActivityModelImpl._setOriginalStrategyId = false;

		projectActivityModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ProjectActivity> toCacheModel() {
		ProjectActivityCacheModel projectActivityCacheModel = new ProjectActivityCacheModel();

		projectActivityCacheModel.projectActivityId = getProjectActivityId();

		projectActivityCacheModel.strategyId = getStrategyId();

		projectActivityCacheModel.activityName = getActivityName();

		String activityName = projectActivityCacheModel.activityName;

		if ((activityName != null) && (activityName.length() == 0)) {
			projectActivityCacheModel.activityName = null;
		}

		projectActivityCacheModel.groupId = getGroupId();

		projectActivityCacheModel.companyId = getCompanyId();

		projectActivityCacheModel.userId = getUserId();

		projectActivityCacheModel.userName = getUserName();

		String userName = projectActivityCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			projectActivityCacheModel.userName = null;
		}

		Date startDate = getStartDate();

		if (startDate != null) {
			projectActivityCacheModel.startDate = startDate.getTime();
		}
		else {
			projectActivityCacheModel.startDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			projectActivityCacheModel.endDate = endDate.getTime();
		}
		else {
			projectActivityCacheModel.endDate = Long.MIN_VALUE;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			projectActivityCacheModel.createDate = createDate.getTime();
		}
		else {
			projectActivityCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			projectActivityCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			projectActivityCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		projectActivityCacheModel.startMonth = getStartMonth();

		projectActivityCacheModel.startYear = getStartYear();

		projectActivityCacheModel.startMonthName = getStartMonthName();

		String startMonthName = projectActivityCacheModel.startMonthName;

		if ((startMonthName != null) && (startMonthName.length() == 0)) {
			projectActivityCacheModel.startMonthName = null;
		}

		projectActivityCacheModel.endMonth = getEndMonth();

		projectActivityCacheModel.endYear = getEndYear();

		projectActivityCacheModel.endMonthName = getEndMonthName();

		String endMonthName = projectActivityCacheModel.endMonthName;

		if ((endMonthName != null) && (endMonthName.length() == 0)) {
			projectActivityCacheModel.endMonthName = null;
		}

		projectActivityCacheModel.progress = getProgress();

		projectActivityCacheModel.status = getStatus();

		projectActivityCacheModel.progressStatus = getProgressStatus();

		Date completionDate = getCompletionDate();

		if (completionDate != null) {
			projectActivityCacheModel.completionDate = completionDate.getTime();
		}
		else {
			projectActivityCacheModel.completionDate = Long.MIN_VALUE;
		}

		projectActivityCacheModel.resourceName = getResourceName();

		String resourceName = projectActivityCacheModel.resourceName;

		if ((resourceName != null) && (resourceName.length() == 0)) {
			projectActivityCacheModel.resourceName = null;
		}

		projectActivityCacheModel.resourceType = getResourceType();

		String resourceType = projectActivityCacheModel.resourceType;

		if ((resourceType != null) && (resourceType.length() == 0)) {
			projectActivityCacheModel.resourceType = null;
		}

		projectActivityCacheModel.remark = getRemark();

		String remark = projectActivityCacheModel.remark;

		if ((remark != null) && (remark.length() == 0)) {
			projectActivityCacheModel.remark = null;
		}

		return projectActivityCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(49);

		sb.append("{projectActivityId=");
		sb.append(getProjectActivityId());
		sb.append(", strategyId=");
		sb.append(getStrategyId());
		sb.append(", activityName=");
		sb.append(getActivityName());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", startDate=");
		sb.append(getStartDate());
		sb.append(", endDate=");
		sb.append(getEndDate());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", startMonth=");
		sb.append(getStartMonth());
		sb.append(", startYear=");
		sb.append(getStartYear());
		sb.append(", startMonthName=");
		sb.append(getStartMonthName());
		sb.append(", endMonth=");
		sb.append(getEndMonth());
		sb.append(", endYear=");
		sb.append(getEndYear());
		sb.append(", endMonthName=");
		sb.append(getEndMonthName());
		sb.append(", progress=");
		sb.append(getProgress());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", progressStatus=");
		sb.append(getProgressStatus());
		sb.append(", completionDate=");
		sb.append(getCompletionDate());
		sb.append(", resourceName=");
		sb.append(getResourceName());
		sb.append(", resourceType=");
		sb.append(getResourceType());
		sb.append(", remark=");
		sb.append(getRemark());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(76);

		sb.append("<model><model-name>");
		sb.append("com.idetronic.eis.model.ProjectActivity");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>projectActivityId</column-name><column-value><![CDATA[");
		sb.append(getProjectActivityId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>strategyId</column-name><column-value><![CDATA[");
		sb.append(getStrategyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>activityName</column-name><column-value><![CDATA[");
		sb.append(getActivityName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startDate</column-name><column-value><![CDATA[");
		sb.append(getStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endDate</column-name><column-value><![CDATA[");
		sb.append(getEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startMonth</column-name><column-value><![CDATA[");
		sb.append(getStartMonth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startYear</column-name><column-value><![CDATA[");
		sb.append(getStartYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startMonthName</column-name><column-value><![CDATA[");
		sb.append(getStartMonthName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endMonth</column-name><column-value><![CDATA[");
		sb.append(getEndMonth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endYear</column-name><column-value><![CDATA[");
		sb.append(getEndYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endMonthName</column-name><column-value><![CDATA[");
		sb.append(getEndMonthName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>progress</column-name><column-value><![CDATA[");
		sb.append(getProgress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>progressStatus</column-name><column-value><![CDATA[");
		sb.append(getProgressStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>completionDate</column-name><column-value><![CDATA[");
		sb.append(getCompletionDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>resourceName</column-name><column-value><![CDATA[");
		sb.append(getResourceName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>resourceType</column-name><column-value><![CDATA[");
		sb.append(getResourceType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>remark</column-name><column-value><![CDATA[");
		sb.append(getRemark());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ProjectActivity.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ProjectActivity.class
		};
	private long _projectActivityId;
	private long _strategyId;
	private long _originalStrategyId;
	private boolean _setOriginalStrategyId;
	private String _activityName;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _startDate;
	private Date _endDate;
	private Date _createDate;
	private Date _modifiedDate;
	private int _startMonth;
	private int _startYear;
	private String _startMonthName;
	private int _endMonth;
	private int _endYear;
	private String _endMonthName;
	private int _progress;
	private int _status;
	private int _progressStatus;
	private Date _completionDate;
	private String _resourceName;
	private String _resourceType;
	private String _remark;
	private long _columnBitmask;
	private ProjectActivity _escapedModel;
}