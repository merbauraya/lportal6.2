/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.idetronic.eis.model.impl;

import com.idetronic.eis.model.MasterFile;
import com.idetronic.eis.model.MasterFileModel;
import com.idetronic.eis.model.MasterFileSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the MasterFile service. Represents a row in the &quot;eis_MasterFile&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.idetronic.eis.model.MasterFileModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MasterFileImpl}.
 * </p>
 *
 * @author Mazlan Mat
 * @see MasterFileImpl
 * @see com.idetronic.eis.model.MasterFile
 * @see com.idetronic.eis.model.MasterFileModel
 * @generated
 */
@JSON(strict = true)
public class MasterFileModelImpl extends BaseModelImpl<MasterFile>
	implements MasterFileModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a master file model instance should use the {@link com.idetronic.eis.model.MasterFile} interface instead.
	 */
	public static final String TABLE_NAME = "eis_MasterFile";
	public static final Object[][] TABLE_COLUMNS = {
			{ "masterFileId", Types.BIGINT },
			{ "masterTypeId", Types.BIGINT },
			{ "parentId1", Types.BIGINT },
			{ "parentId2", Types.BIGINT },
			{ "masterFileName", Types.VARCHAR },
			{ "status1", Types.BOOLEAN },
			{ "status2", Types.BOOLEAN },
			{ "status3", Types.BOOLEAN },
			{ "status4", Types.BOOLEAN },
			{ "masterCode", Types.VARCHAR },
			{ "oldId", Types.BIGINT },
			{ "note", Types.VARCHAR },
			{ "inActive", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table eis_MasterFile (masterFileId LONG not null primary key,masterTypeId LONG,parentId1 LONG,parentId2 LONG,masterFileName VARCHAR(75) null,status1 BOOLEAN,status2 BOOLEAN,status3 BOOLEAN,status4 BOOLEAN,masterCode VARCHAR(75) null,oldId LONG,note VARCHAR(75) null,inActive BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table eis_MasterFile";
	public static final String ORDER_BY_JPQL = " ORDER BY masterFile.masterFileId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY eis_MasterFile.masterFileId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.idetronic.eis.model.MasterFile"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.idetronic.eis.model.MasterFile"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.idetronic.eis.model.MasterFile"),
			true);
	public static long INACTIVE_COLUMN_BITMASK = 1L;
	public static long MASTERFILENAME_COLUMN_BITMASK = 2L;
	public static long MASTERTYPEID_COLUMN_BITMASK = 4L;
	public static long OLDID_COLUMN_BITMASK = 8L;
	public static long PARENTID1_COLUMN_BITMASK = 16L;
	public static long PARENTID2_COLUMN_BITMASK = 32L;
	public static long STATUS1_COLUMN_BITMASK = 64L;
	public static long STATUS2_COLUMN_BITMASK = 128L;
	public static long STATUS3_COLUMN_BITMASK = 256L;
	public static long STATUS4_COLUMN_BITMASK = 512L;
	public static long MASTERFILEID_COLUMN_BITMASK = 1024L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static MasterFile toModel(MasterFileSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		MasterFile model = new MasterFileImpl();

		model.setMasterFileId(soapModel.getMasterFileId());
		model.setMasterTypeId(soapModel.getMasterTypeId());
		model.setParentId1(soapModel.getParentId1());
		model.setParentId2(soapModel.getParentId2());
		model.setMasterFileName(soapModel.getMasterFileName());
		model.setStatus1(soapModel.getStatus1());
		model.setStatus2(soapModel.getStatus2());
		model.setStatus3(soapModel.getStatus3());
		model.setStatus4(soapModel.getStatus4());
		model.setMasterCode(soapModel.getMasterCode());
		model.setOldId(soapModel.getOldId());
		model.setNote(soapModel.getNote());
		model.setInActive(soapModel.getInActive());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<MasterFile> toModels(MasterFileSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<MasterFile> models = new ArrayList<MasterFile>(soapModels.length);

		for (MasterFileSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.idetronic.eis.model.MasterFile"));

	public MasterFileModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _masterFileId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMasterFileId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _masterFileId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MasterFile.class;
	}

	@Override
	public String getModelClassName() {
		return MasterFile.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("masterFileId", getMasterFileId());
		attributes.put("masterTypeId", getMasterTypeId());
		attributes.put("parentId1", getParentId1());
		attributes.put("parentId2", getParentId2());
		attributes.put("masterFileName", getMasterFileName());
		attributes.put("status1", getStatus1());
		attributes.put("status2", getStatus2());
		attributes.put("status3", getStatus3());
		attributes.put("status4", getStatus4());
		attributes.put("masterCode", getMasterCode());
		attributes.put("oldId", getOldId());
		attributes.put("note", getNote());
		attributes.put("inActive", getInActive());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long masterFileId = (Long)attributes.get("masterFileId");

		if (masterFileId != null) {
			setMasterFileId(masterFileId);
		}

		Long masterTypeId = (Long)attributes.get("masterTypeId");

		if (masterTypeId != null) {
			setMasterTypeId(masterTypeId);
		}

		Long parentId1 = (Long)attributes.get("parentId1");

		if (parentId1 != null) {
			setParentId1(parentId1);
		}

		Long parentId2 = (Long)attributes.get("parentId2");

		if (parentId2 != null) {
			setParentId2(parentId2);
		}

		String masterFileName = (String)attributes.get("masterFileName");

		if (masterFileName != null) {
			setMasterFileName(masterFileName);
		}

		Boolean status1 = (Boolean)attributes.get("status1");

		if (status1 != null) {
			setStatus1(status1);
		}

		Boolean status2 = (Boolean)attributes.get("status2");

		if (status2 != null) {
			setStatus2(status2);
		}

		Boolean status3 = (Boolean)attributes.get("status3");

		if (status3 != null) {
			setStatus3(status3);
		}

		Boolean status4 = (Boolean)attributes.get("status4");

		if (status4 != null) {
			setStatus4(status4);
		}

		String masterCode = (String)attributes.get("masterCode");

		if (masterCode != null) {
			setMasterCode(masterCode);
		}

		Long oldId = (Long)attributes.get("oldId");

		if (oldId != null) {
			setOldId(oldId);
		}

		String note = (String)attributes.get("note");

		if (note != null) {
			setNote(note);
		}

		Boolean inActive = (Boolean)attributes.get("inActive");

		if (inActive != null) {
			setInActive(inActive);
		}
	}

	@JSON
	@Override
	public long getMasterFileId() {
		return _masterFileId;
	}

	@Override
	public void setMasterFileId(long masterFileId) {
		_masterFileId = masterFileId;
	}

	@JSON
	@Override
	public long getMasterTypeId() {
		return _masterTypeId;
	}

	@Override
	public void setMasterTypeId(long masterTypeId) {
		_columnBitmask |= MASTERTYPEID_COLUMN_BITMASK;

		if (!_setOriginalMasterTypeId) {
			_setOriginalMasterTypeId = true;

			_originalMasterTypeId = _masterTypeId;
		}

		_masterTypeId = masterTypeId;
	}

	public long getOriginalMasterTypeId() {
		return _originalMasterTypeId;
	}

	@JSON
	@Override
	public long getParentId1() {
		return _parentId1;
	}

	@Override
	public void setParentId1(long parentId1) {
		_columnBitmask |= PARENTID1_COLUMN_BITMASK;

		if (!_setOriginalParentId1) {
			_setOriginalParentId1 = true;

			_originalParentId1 = _parentId1;
		}

		_parentId1 = parentId1;
	}

	public long getOriginalParentId1() {
		return _originalParentId1;
	}

	@JSON
	@Override
	public long getParentId2() {
		return _parentId2;
	}

	@Override
	public void setParentId2(long parentId2) {
		_columnBitmask |= PARENTID2_COLUMN_BITMASK;

		if (!_setOriginalParentId2) {
			_setOriginalParentId2 = true;

			_originalParentId2 = _parentId2;
		}

		_parentId2 = parentId2;
	}

	public long getOriginalParentId2() {
		return _originalParentId2;
	}

	@JSON
	@Override
	public String getMasterFileName() {
		if (_masterFileName == null) {
			return StringPool.BLANK;
		}
		else {
			return _masterFileName;
		}
	}

	@Override
	public void setMasterFileName(String masterFileName) {
		_columnBitmask |= MASTERFILENAME_COLUMN_BITMASK;

		if (_originalMasterFileName == null) {
			_originalMasterFileName = _masterFileName;
		}

		_masterFileName = masterFileName;
	}

	public String getOriginalMasterFileName() {
		return GetterUtil.getString(_originalMasterFileName);
	}

	@JSON
	@Override
	public boolean getStatus1() {
		return _status1;
	}

	@Override
	public boolean isStatus1() {
		return _status1;
	}

	@Override
	public void setStatus1(boolean status1) {
		_columnBitmask |= STATUS1_COLUMN_BITMASK;

		if (!_setOriginalStatus1) {
			_setOriginalStatus1 = true;

			_originalStatus1 = _status1;
		}

		_status1 = status1;
	}

	public boolean getOriginalStatus1() {
		return _originalStatus1;
	}

	@JSON
	@Override
	public boolean getStatus2() {
		return _status2;
	}

	@Override
	public boolean isStatus2() {
		return _status2;
	}

	@Override
	public void setStatus2(boolean status2) {
		_columnBitmask |= STATUS2_COLUMN_BITMASK;

		if (!_setOriginalStatus2) {
			_setOriginalStatus2 = true;

			_originalStatus2 = _status2;
		}

		_status2 = status2;
	}

	public boolean getOriginalStatus2() {
		return _originalStatus2;
	}

	@JSON
	@Override
	public boolean getStatus3() {
		return _status3;
	}

	@Override
	public boolean isStatus3() {
		return _status3;
	}

	@Override
	public void setStatus3(boolean status3) {
		_columnBitmask |= STATUS3_COLUMN_BITMASK;

		if (!_setOriginalStatus3) {
			_setOriginalStatus3 = true;

			_originalStatus3 = _status3;
		}

		_status3 = status3;
	}

	public boolean getOriginalStatus3() {
		return _originalStatus3;
	}

	@JSON
	@Override
	public boolean getStatus4() {
		return _status4;
	}

	@Override
	public boolean isStatus4() {
		return _status4;
	}

	@Override
	public void setStatus4(boolean status4) {
		_columnBitmask |= STATUS4_COLUMN_BITMASK;

		if (!_setOriginalStatus4) {
			_setOriginalStatus4 = true;

			_originalStatus4 = _status4;
		}

		_status4 = status4;
	}

	public boolean getOriginalStatus4() {
		return _originalStatus4;
	}

	@JSON
	@Override
	public String getMasterCode() {
		if (_masterCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _masterCode;
		}
	}

	@Override
	public void setMasterCode(String masterCode) {
		_masterCode = masterCode;
	}

	@JSON
	@Override
	public long getOldId() {
		return _oldId;
	}

	@Override
	public void setOldId(long oldId) {
		_columnBitmask |= OLDID_COLUMN_BITMASK;

		if (!_setOriginalOldId) {
			_setOriginalOldId = true;

			_originalOldId = _oldId;
		}

		_oldId = oldId;
	}

	public long getOriginalOldId() {
		return _originalOldId;
	}

	@JSON
	@Override
	public String getNote() {
		if (_note == null) {
			return StringPool.BLANK;
		}
		else {
			return _note;
		}
	}

	@Override
	public void setNote(String note) {
		_note = note;
	}

	@JSON
	@Override
	public boolean getInActive() {
		return _inActive;
	}

	@Override
	public boolean isInActive() {
		return _inActive;
	}

	@Override
	public void setInActive(boolean inActive) {
		_columnBitmask |= INACTIVE_COLUMN_BITMASK;

		if (!_setOriginalInActive) {
			_setOriginalInActive = true;

			_originalInActive = _inActive;
		}

		_inActive = inActive;
	}

	public boolean getOriginalInActive() {
		return _originalInActive;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			MasterFile.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MasterFile toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (MasterFile)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MasterFileImpl masterFileImpl = new MasterFileImpl();

		masterFileImpl.setMasterFileId(getMasterFileId());
		masterFileImpl.setMasterTypeId(getMasterTypeId());
		masterFileImpl.setParentId1(getParentId1());
		masterFileImpl.setParentId2(getParentId2());
		masterFileImpl.setMasterFileName(getMasterFileName());
		masterFileImpl.setStatus1(getStatus1());
		masterFileImpl.setStatus2(getStatus2());
		masterFileImpl.setStatus3(getStatus3());
		masterFileImpl.setStatus4(getStatus4());
		masterFileImpl.setMasterCode(getMasterCode());
		masterFileImpl.setOldId(getOldId());
		masterFileImpl.setNote(getNote());
		masterFileImpl.setInActive(getInActive());

		masterFileImpl.resetOriginalValues();

		return masterFileImpl;
	}

	@Override
	public int compareTo(MasterFile masterFile) {
		long primaryKey = masterFile.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof MasterFile)) {
			return false;
		}

		MasterFile masterFile = (MasterFile)obj;

		long primaryKey = masterFile.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		MasterFileModelImpl masterFileModelImpl = this;

		masterFileModelImpl._originalMasterTypeId = masterFileModelImpl._masterTypeId;

		masterFileModelImpl._setOriginalMasterTypeId = false;

		masterFileModelImpl._originalParentId1 = masterFileModelImpl._parentId1;

		masterFileModelImpl._setOriginalParentId1 = false;

		masterFileModelImpl._originalParentId2 = masterFileModelImpl._parentId2;

		masterFileModelImpl._setOriginalParentId2 = false;

		masterFileModelImpl._originalMasterFileName = masterFileModelImpl._masterFileName;

		masterFileModelImpl._originalStatus1 = masterFileModelImpl._status1;

		masterFileModelImpl._setOriginalStatus1 = false;

		masterFileModelImpl._originalStatus2 = masterFileModelImpl._status2;

		masterFileModelImpl._setOriginalStatus2 = false;

		masterFileModelImpl._originalStatus3 = masterFileModelImpl._status3;

		masterFileModelImpl._setOriginalStatus3 = false;

		masterFileModelImpl._originalStatus4 = masterFileModelImpl._status4;

		masterFileModelImpl._setOriginalStatus4 = false;

		masterFileModelImpl._originalOldId = masterFileModelImpl._oldId;

		masterFileModelImpl._setOriginalOldId = false;

		masterFileModelImpl._originalInActive = masterFileModelImpl._inActive;

		masterFileModelImpl._setOriginalInActive = false;

		masterFileModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<MasterFile> toCacheModel() {
		MasterFileCacheModel masterFileCacheModel = new MasterFileCacheModel();

		masterFileCacheModel.masterFileId = getMasterFileId();

		masterFileCacheModel.masterTypeId = getMasterTypeId();

		masterFileCacheModel.parentId1 = getParentId1();

		masterFileCacheModel.parentId2 = getParentId2();

		masterFileCacheModel.masterFileName = getMasterFileName();

		String masterFileName = masterFileCacheModel.masterFileName;

		if ((masterFileName != null) && (masterFileName.length() == 0)) {
			masterFileCacheModel.masterFileName = null;
		}

		masterFileCacheModel.status1 = getStatus1();

		masterFileCacheModel.status2 = getStatus2();

		masterFileCacheModel.status3 = getStatus3();

		masterFileCacheModel.status4 = getStatus4();

		masterFileCacheModel.masterCode = getMasterCode();

		String masterCode = masterFileCacheModel.masterCode;

		if ((masterCode != null) && (masterCode.length() == 0)) {
			masterFileCacheModel.masterCode = null;
		}

		masterFileCacheModel.oldId = getOldId();

		masterFileCacheModel.note = getNote();

		String note = masterFileCacheModel.note;

		if ((note != null) && (note.length() == 0)) {
			masterFileCacheModel.note = null;
		}

		masterFileCacheModel.inActive = getInActive();

		return masterFileCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{masterFileId=");
		sb.append(getMasterFileId());
		sb.append(", masterTypeId=");
		sb.append(getMasterTypeId());
		sb.append(", parentId1=");
		sb.append(getParentId1());
		sb.append(", parentId2=");
		sb.append(getParentId2());
		sb.append(", masterFileName=");
		sb.append(getMasterFileName());
		sb.append(", status1=");
		sb.append(getStatus1());
		sb.append(", status2=");
		sb.append(getStatus2());
		sb.append(", status3=");
		sb.append(getStatus3());
		sb.append(", status4=");
		sb.append(getStatus4());
		sb.append(", masterCode=");
		sb.append(getMasterCode());
		sb.append(", oldId=");
		sb.append(getOldId());
		sb.append(", note=");
		sb.append(getNote());
		sb.append(", inActive=");
		sb.append(getInActive());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("com.idetronic.eis.model.MasterFile");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>masterFileId</column-name><column-value><![CDATA[");
		sb.append(getMasterFileId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>masterTypeId</column-name><column-value><![CDATA[");
		sb.append(getMasterTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentId1</column-name><column-value><![CDATA[");
		sb.append(getParentId1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentId2</column-name><column-value><![CDATA[");
		sb.append(getParentId2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>masterFileName</column-name><column-value><![CDATA[");
		sb.append(getMasterFileName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status1</column-name><column-value><![CDATA[");
		sb.append(getStatus1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status2</column-name><column-value><![CDATA[");
		sb.append(getStatus2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status3</column-name><column-value><![CDATA[");
		sb.append(getStatus3());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status4</column-name><column-value><![CDATA[");
		sb.append(getStatus4());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>masterCode</column-name><column-value><![CDATA[");
		sb.append(getMasterCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>oldId</column-name><column-value><![CDATA[");
		sb.append(getOldId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>note</column-name><column-value><![CDATA[");
		sb.append(getNote());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inActive</column-name><column-value><![CDATA[");
		sb.append(getInActive());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = MasterFile.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			MasterFile.class
		};
	private long _masterFileId;
	private long _masterTypeId;
	private long _originalMasterTypeId;
	private boolean _setOriginalMasterTypeId;
	private long _parentId1;
	private long _originalParentId1;
	private boolean _setOriginalParentId1;
	private long _parentId2;
	private long _originalParentId2;
	private boolean _setOriginalParentId2;
	private String _masterFileName;
	private String _originalMasterFileName;
	private boolean _status1;
	private boolean _originalStatus1;
	private boolean _setOriginalStatus1;
	private boolean _status2;
	private boolean _originalStatus2;
	private boolean _setOriginalStatus2;
	private boolean _status3;
	private boolean _originalStatus3;
	private boolean _setOriginalStatus3;
	private boolean _status4;
	private boolean _originalStatus4;
	private boolean _setOriginalStatus4;
	private String _masterCode;
	private long _oldId;
	private long _originalOldId;
	private boolean _setOriginalOldId;
	private String _note;
	private boolean _inActive;
	private boolean _originalInActive;
	private boolean _setOriginalInActive;
	private long _columnBitmask;
	private MasterFile _escapedModel;
}