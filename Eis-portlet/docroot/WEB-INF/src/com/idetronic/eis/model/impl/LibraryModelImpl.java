/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.idetronic.eis.model.impl;

import com.idetronic.eis.model.Library;
import com.idetronic.eis.model.LibraryModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Library service. Represents a row in the &quot;eis_Library&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.idetronic.eis.model.LibraryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LibraryImpl}.
 * </p>
 *
 * @author Mazlan Mat
 * @see LibraryImpl
 * @see com.idetronic.eis.model.Library
 * @see com.idetronic.eis.model.LibraryModel
 * @generated
 */
public class LibraryModelImpl extends BaseModelImpl<Library>
	implements LibraryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a library model instance should use the {@link com.idetronic.eis.model.Library} interface instead.
	 */
	public static final String TABLE_NAME = "eis_Library";
	public static final Object[][] TABLE_COLUMNS = {
			{ "libraryId", Types.BIGINT },
			{ "libraryCode", Types.VARCHAR },
			{ "stateId", Types.BIGINT },
			{ "libraryTypeId", Types.BIGINT },
			{ "stateName", Types.VARCHAR },
			{ "libraryName", Types.VARCHAR },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table eis_Library (libraryId LONG not null primary key,libraryCode VARCHAR(10) null,stateId LONG,libraryTypeId LONG,stateName VARCHAR(75) null,libraryName VARCHAR(75) null,companyId LONG,groupId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table eis_Library";
	public static final String ORDER_BY_JPQL = " ORDER BY library.createDate ASC";
	public static final String ORDER_BY_SQL = " ORDER BY eis_Library.createDate ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.idetronic.eis.model.Library"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.idetronic.eis.model.Library"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.idetronic.eis.model.Library"),
			true);
	public static long LIBRARYCODE_COLUMN_BITMASK = 1L;
	public static long LIBRARYNAME_COLUMN_BITMASK = 2L;
	public static long STATEID_COLUMN_BITMASK = 4L;
	public static long CREATEDATE_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.idetronic.eis.model.Library"));

	public LibraryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _libraryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLibraryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _libraryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Library.class;
	}

	@Override
	public String getModelClassName() {
		return Library.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("libraryId", getLibraryId());
		attributes.put("libraryCode", getLibraryCode());
		attributes.put("stateId", getStateId());
		attributes.put("libraryTypeId", getLibraryTypeId());
		attributes.put("stateName", getStateName());
		attributes.put("libraryName", getLibraryName());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long libraryId = (Long)attributes.get("libraryId");

		if (libraryId != null) {
			setLibraryId(libraryId);
		}

		String libraryCode = (String)attributes.get("libraryCode");

		if (libraryCode != null) {
			setLibraryCode(libraryCode);
		}

		Long stateId = (Long)attributes.get("stateId");

		if (stateId != null) {
			setStateId(stateId);
		}

		Long libraryTypeId = (Long)attributes.get("libraryTypeId");

		if (libraryTypeId != null) {
			setLibraryTypeId(libraryTypeId);
		}

		String stateName = (String)attributes.get("stateName");

		if (stateName != null) {
			setStateName(stateName);
		}

		String libraryName = (String)attributes.get("libraryName");

		if (libraryName != null) {
			setLibraryName(libraryName);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@Override
	public long getLibraryId() {
		return _libraryId;
	}

	@Override
	public void setLibraryId(long libraryId) {
		_libraryId = libraryId;
	}

	@Override
	public String getLibraryCode() {
		if (_libraryCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _libraryCode;
		}
	}

	@Override
	public void setLibraryCode(String libraryCode) {
		_columnBitmask |= LIBRARYCODE_COLUMN_BITMASK;

		if (_originalLibraryCode == null) {
			_originalLibraryCode = _libraryCode;
		}

		_libraryCode = libraryCode;
	}

	public String getOriginalLibraryCode() {
		return GetterUtil.getString(_originalLibraryCode);
	}

	@Override
	public long getStateId() {
		return _stateId;
	}

	@Override
	public void setStateId(long stateId) {
		_columnBitmask |= STATEID_COLUMN_BITMASK;

		if (!_setOriginalStateId) {
			_setOriginalStateId = true;

			_originalStateId = _stateId;
		}

		_stateId = stateId;
	}

	public long getOriginalStateId() {
		return _originalStateId;
	}

	@Override
	public long getLibraryTypeId() {
		return _libraryTypeId;
	}

	@Override
	public void setLibraryTypeId(long libraryTypeId) {
		_libraryTypeId = libraryTypeId;
	}

	@Override
	public String getStateName() {
		if (_stateName == null) {
			return StringPool.BLANK;
		}
		else {
			return _stateName;
		}
	}

	@Override
	public void setStateName(String stateName) {
		_stateName = stateName;
	}

	@Override
	public String getLibraryName() {
		if (_libraryName == null) {
			return StringPool.BLANK;
		}
		else {
			return _libraryName;
		}
	}

	@Override
	public void setLibraryName(String libraryName) {
		_columnBitmask |= LIBRARYNAME_COLUMN_BITMASK;

		if (_originalLibraryName == null) {
			_originalLibraryName = _libraryName;
		}

		_libraryName = libraryName;
	}

	public String getOriginalLibraryName() {
		return GetterUtil.getString(_originalLibraryName);
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Library.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Library toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Library)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LibraryImpl libraryImpl = new LibraryImpl();

		libraryImpl.setLibraryId(getLibraryId());
		libraryImpl.setLibraryCode(getLibraryCode());
		libraryImpl.setStateId(getStateId());
		libraryImpl.setLibraryTypeId(getLibraryTypeId());
		libraryImpl.setStateName(getStateName());
		libraryImpl.setLibraryName(getLibraryName());
		libraryImpl.setCompanyId(getCompanyId());
		libraryImpl.setGroupId(getGroupId());
		libraryImpl.setUserId(getUserId());
		libraryImpl.setUserName(getUserName());
		libraryImpl.setCreateDate(getCreateDate());
		libraryImpl.setModifiedDate(getModifiedDate());

		libraryImpl.resetOriginalValues();

		return libraryImpl;
	}

	@Override
	public int compareTo(Library library) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(), library.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Library)) {
			return false;
		}

		Library library = (Library)obj;

		long primaryKey = library.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		LibraryModelImpl libraryModelImpl = this;

		libraryModelImpl._originalLibraryCode = libraryModelImpl._libraryCode;

		libraryModelImpl._originalStateId = libraryModelImpl._stateId;

		libraryModelImpl._setOriginalStateId = false;

		libraryModelImpl._originalLibraryName = libraryModelImpl._libraryName;

		libraryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Library> toCacheModel() {
		LibraryCacheModel libraryCacheModel = new LibraryCacheModel();

		libraryCacheModel.libraryId = getLibraryId();

		libraryCacheModel.libraryCode = getLibraryCode();

		String libraryCode = libraryCacheModel.libraryCode;

		if ((libraryCode != null) && (libraryCode.length() == 0)) {
			libraryCacheModel.libraryCode = null;
		}

		libraryCacheModel.stateId = getStateId();

		libraryCacheModel.libraryTypeId = getLibraryTypeId();

		libraryCacheModel.stateName = getStateName();

		String stateName = libraryCacheModel.stateName;

		if ((stateName != null) && (stateName.length() == 0)) {
			libraryCacheModel.stateName = null;
		}

		libraryCacheModel.libraryName = getLibraryName();

		String libraryName = libraryCacheModel.libraryName;

		if ((libraryName != null) && (libraryName.length() == 0)) {
			libraryCacheModel.libraryName = null;
		}

		libraryCacheModel.companyId = getCompanyId();

		libraryCacheModel.groupId = getGroupId();

		libraryCacheModel.userId = getUserId();

		libraryCacheModel.userName = getUserName();

		String userName = libraryCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			libraryCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			libraryCacheModel.createDate = createDate.getTime();
		}
		else {
			libraryCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			libraryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			libraryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return libraryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{libraryId=");
		sb.append(getLibraryId());
		sb.append(", libraryCode=");
		sb.append(getLibraryCode());
		sb.append(", stateId=");
		sb.append(getStateId());
		sb.append(", libraryTypeId=");
		sb.append(getLibraryTypeId());
		sb.append(", stateName=");
		sb.append(getStateName());
		sb.append(", libraryName=");
		sb.append(getLibraryName());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("com.idetronic.eis.model.Library");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>libraryId</column-name><column-value><![CDATA[");
		sb.append(getLibraryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>libraryCode</column-name><column-value><![CDATA[");
		sb.append(getLibraryCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stateId</column-name><column-value><![CDATA[");
		sb.append(getStateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>libraryTypeId</column-name><column-value><![CDATA[");
		sb.append(getLibraryTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stateName</column-name><column-value><![CDATA[");
		sb.append(getStateName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>libraryName</column-name><column-value><![CDATA[");
		sb.append(getLibraryName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Library.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Library.class
		};
	private long _libraryId;
	private String _libraryCode;
	private String _originalLibraryCode;
	private long _stateId;
	private long _originalStateId;
	private boolean _setOriginalStateId;
	private long _libraryTypeId;
	private String _stateName;
	private String _libraryName;
	private String _originalLibraryName;
	private long _companyId;
	private long _groupId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _columnBitmask;
	private Library _escapedModel;
}