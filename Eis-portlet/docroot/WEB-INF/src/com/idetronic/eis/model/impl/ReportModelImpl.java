/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.idetronic.eis.model.impl;

import com.idetronic.eis.model.Report;
import com.idetronic.eis.model.ReportModel;
import com.idetronic.eis.model.ReportSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Report service. Represents a row in the &quot;eis_Report&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.idetronic.eis.model.ReportModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ReportImpl}.
 * </p>
 *
 * @author Mazlan Mat
 * @see ReportImpl
 * @see com.idetronic.eis.model.Report
 * @see com.idetronic.eis.model.ReportModel
 * @generated
 */
@JSON(strict = true)
public class ReportModelImpl extends BaseModelImpl<Report>
	implements ReportModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a report model instance should use the {@link com.idetronic.eis.model.Report} interface instead.
	 */
	public static final String TABLE_NAME = "eis_Report";
	public static final Object[][] TABLE_COLUMNS = {
			{ "reportId", Types.BIGINT },
			{ "reportKey", Types.VARCHAR },
			{ "reportName", Types.VARCHAR },
			{ "reportTitle", Types.VARCHAR },
			{ "dataEntry", Types.BOOLEAN },
			{ "dataName", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table eis_Report (reportId LONG not null primary key,reportKey VARCHAR(75) null,reportName VARCHAR(75) null,reportTitle VARCHAR(150) null,dataEntry BOOLEAN,dataName VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table eis_Report";
	public static final String ORDER_BY_JPQL = " ORDER BY report.reportId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY eis_Report.reportId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.idetronic.eis.model.Report"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.idetronic.eis.model.Report"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.idetronic.eis.model.Report"),
			true);
	public static long DATAENTRY_COLUMN_BITMASK = 1L;
	public static long REPORTKEY_COLUMN_BITMASK = 2L;
	public static long REPORTID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Report toModel(ReportSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Report model = new ReportImpl();

		model.setReportId(soapModel.getReportId());
		model.setReportKey(soapModel.getReportKey());
		model.setReportName(soapModel.getReportName());
		model.setReportTitle(soapModel.getReportTitle());
		model.setDataEntry(soapModel.getDataEntry());
		model.setDataName(soapModel.getDataName());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Report> toModels(ReportSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Report> models = new ArrayList<Report>(soapModels.length);

		for (ReportSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.idetronic.eis.model.Report"));

	public ReportModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _reportId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setReportId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _reportId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Report.class;
	}

	@Override
	public String getModelClassName() {
		return Report.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("reportId", getReportId());
		attributes.put("reportKey", getReportKey());
		attributes.put("reportName", getReportName());
		attributes.put("reportTitle", getReportTitle());
		attributes.put("dataEntry", getDataEntry());
		attributes.put("dataName", getDataName());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long reportId = (Long)attributes.get("reportId");

		if (reportId != null) {
			setReportId(reportId);
		}

		String reportKey = (String)attributes.get("reportKey");

		if (reportKey != null) {
			setReportKey(reportKey);
		}

		String reportName = (String)attributes.get("reportName");

		if (reportName != null) {
			setReportName(reportName);
		}

		String reportTitle = (String)attributes.get("reportTitle");

		if (reportTitle != null) {
			setReportTitle(reportTitle);
		}

		Boolean dataEntry = (Boolean)attributes.get("dataEntry");

		if (dataEntry != null) {
			setDataEntry(dataEntry);
		}

		String dataName = (String)attributes.get("dataName");

		if (dataName != null) {
			setDataName(dataName);
		}
	}

	@JSON
	@Override
	public long getReportId() {
		return _reportId;
	}

	@Override
	public void setReportId(long reportId) {
		_reportId = reportId;
	}

	@JSON
	@Override
	public String getReportKey() {
		if (_reportKey == null) {
			return StringPool.BLANK;
		}
		else {
			return _reportKey;
		}
	}

	@Override
	public void setReportKey(String reportKey) {
		_columnBitmask |= REPORTKEY_COLUMN_BITMASK;

		if (_originalReportKey == null) {
			_originalReportKey = _reportKey;
		}

		_reportKey = reportKey;
	}

	public String getOriginalReportKey() {
		return GetterUtil.getString(_originalReportKey);
	}

	@JSON
	@Override
	public String getReportName() {
		if (_reportName == null) {
			return StringPool.BLANK;
		}
		else {
			return _reportName;
		}
	}

	@Override
	public void setReportName(String reportName) {
		_reportName = reportName;
	}

	@JSON
	@Override
	public String getReportTitle() {
		if (_reportTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _reportTitle;
		}
	}

	@Override
	public void setReportTitle(String reportTitle) {
		_reportTitle = reportTitle;
	}

	@JSON
	@Override
	public boolean getDataEntry() {
		return _dataEntry;
	}

	@Override
	public boolean isDataEntry() {
		return _dataEntry;
	}

	@Override
	public void setDataEntry(boolean dataEntry) {
		_columnBitmask |= DATAENTRY_COLUMN_BITMASK;

		if (!_setOriginalDataEntry) {
			_setOriginalDataEntry = true;

			_originalDataEntry = _dataEntry;
		}

		_dataEntry = dataEntry;
	}

	public boolean getOriginalDataEntry() {
		return _originalDataEntry;
	}

	@JSON
	@Override
	public String getDataName() {
		if (_dataName == null) {
			return StringPool.BLANK;
		}
		else {
			return _dataName;
		}
	}

	@Override
	public void setDataName(String dataName) {
		_dataName = dataName;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Report.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Report toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Report)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ReportImpl reportImpl = new ReportImpl();

		reportImpl.setReportId(getReportId());
		reportImpl.setReportKey(getReportKey());
		reportImpl.setReportName(getReportName());
		reportImpl.setReportTitle(getReportTitle());
		reportImpl.setDataEntry(getDataEntry());
		reportImpl.setDataName(getDataName());

		reportImpl.resetOriginalValues();

		return reportImpl;
	}

	@Override
	public int compareTo(Report report) {
		long primaryKey = report.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Report)) {
			return false;
		}

		Report report = (Report)obj;

		long primaryKey = report.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ReportModelImpl reportModelImpl = this;

		reportModelImpl._originalReportKey = reportModelImpl._reportKey;

		reportModelImpl._originalDataEntry = reportModelImpl._dataEntry;

		reportModelImpl._setOriginalDataEntry = false;

		reportModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Report> toCacheModel() {
		ReportCacheModel reportCacheModel = new ReportCacheModel();

		reportCacheModel.reportId = getReportId();

		reportCacheModel.reportKey = getReportKey();

		String reportKey = reportCacheModel.reportKey;

		if ((reportKey != null) && (reportKey.length() == 0)) {
			reportCacheModel.reportKey = null;
		}

		reportCacheModel.reportName = getReportName();

		String reportName = reportCacheModel.reportName;

		if ((reportName != null) && (reportName.length() == 0)) {
			reportCacheModel.reportName = null;
		}

		reportCacheModel.reportTitle = getReportTitle();

		String reportTitle = reportCacheModel.reportTitle;

		if ((reportTitle != null) && (reportTitle.length() == 0)) {
			reportCacheModel.reportTitle = null;
		}

		reportCacheModel.dataEntry = getDataEntry();

		reportCacheModel.dataName = getDataName();

		String dataName = reportCacheModel.dataName;

		if ((dataName != null) && (dataName.length() == 0)) {
			reportCacheModel.dataName = null;
		}

		return reportCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{reportId=");
		sb.append(getReportId());
		sb.append(", reportKey=");
		sb.append(getReportKey());
		sb.append(", reportName=");
		sb.append(getReportName());
		sb.append(", reportTitle=");
		sb.append(getReportTitle());
		sb.append(", dataEntry=");
		sb.append(getDataEntry());
		sb.append(", dataName=");
		sb.append(getDataName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.idetronic.eis.model.Report");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>reportId</column-name><column-value><![CDATA[");
		sb.append(getReportId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reportKey</column-name><column-value><![CDATA[");
		sb.append(getReportKey());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reportName</column-name><column-value><![CDATA[");
		sb.append(getReportName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reportTitle</column-name><column-value><![CDATA[");
		sb.append(getReportTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dataEntry</column-name><column-value><![CDATA[");
		sb.append(getDataEntry());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dataName</column-name><column-value><![CDATA[");
		sb.append(getDataName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Report.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Report.class };
	private long _reportId;
	private String _reportKey;
	private String _originalReportKey;
	private String _reportName;
	private String _reportTitle;
	private boolean _dataEntry;
	private boolean _originalDataEntry;
	private boolean _setOriginalDataEntry;
	private String _dataName;
	private long _columnBitmask;
	private Report _escapedModel;
}