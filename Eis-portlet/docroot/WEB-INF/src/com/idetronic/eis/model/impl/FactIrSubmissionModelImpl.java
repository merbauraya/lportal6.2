/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.idetronic.eis.model.impl;

import com.idetronic.eis.model.FactIrSubmission;
import com.idetronic.eis.model.FactIrSubmissionModel;
import com.idetronic.eis.model.FactIrSubmissionSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the FactIrSubmission service. Represents a row in the &quot;eis_FactIrSubmission&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.idetronic.eis.model.FactIrSubmissionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FactIrSubmissionImpl}.
 * </p>
 *
 * @author Mazlan Mat
 * @see FactIrSubmissionImpl
 * @see com.idetronic.eis.model.FactIrSubmission
 * @see com.idetronic.eis.model.FactIrSubmissionModel
 * @generated
 */
@JSON(strict = true)
public class FactIrSubmissionModelImpl extends BaseModelImpl<FactIrSubmission>
	implements FactIrSubmissionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a fact ir submission model instance should use the {@link com.idetronic.eis.model.FactIrSubmission} interface instead.
	 */
	public static final String TABLE_NAME = "eis_FactIrSubmission";
	public static final Object[][] TABLE_COLUMNS = {
			{ "submissionId", Types.BIGINT },
			{ "libraryId", Types.BIGINT },
			{ "facultyId", Types.BIGINT },
			{ "period", Types.VARCHAR },
			{ "itemMediumId", Types.BIGINT },
			{ "titleTotal", Types.INTEGER },
			{ "volumeTotal", Types.INTEGER },
			{ "createdByUserId", Types.BIGINT },
			{ "createdByUserName", Types.VARCHAR },
			{ "createdDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table eis_FactIrSubmission (submissionId LONG not null primary key,libraryId LONG,facultyId LONG,period VARCHAR(10) null,itemMediumId LONG,titleTotal INTEGER,volumeTotal INTEGER,createdByUserId LONG,createdByUserName VARCHAR(75) null,createdDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table eis_FactIrSubmission";
	public static final String ORDER_BY_JPQL = " ORDER BY factIrSubmission.submissionId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY eis_FactIrSubmission.submissionId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.idetronic.eis.model.FactIrSubmission"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.idetronic.eis.model.FactIrSubmission"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.idetronic.eis.model.FactIrSubmission"),
			true);
	public static long FACULTYID_COLUMN_BITMASK = 1L;
	public static long PERIOD_COLUMN_BITMASK = 2L;
	public static long SUBMISSIONID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static FactIrSubmission toModel(FactIrSubmissionSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		FactIrSubmission model = new FactIrSubmissionImpl();

		model.setSubmissionId(soapModel.getSubmissionId());
		model.setLibraryId(soapModel.getLibraryId());
		model.setFacultyId(soapModel.getFacultyId());
		model.setPeriod(soapModel.getPeriod());
		model.setItemMediumId(soapModel.getItemMediumId());
		model.setTitleTotal(soapModel.getTitleTotal());
		model.setVolumeTotal(soapModel.getVolumeTotal());
		model.setCreatedByUserId(soapModel.getCreatedByUserId());
		model.setCreatedByUserName(soapModel.getCreatedByUserName());
		model.setCreatedDate(soapModel.getCreatedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<FactIrSubmission> toModels(
		FactIrSubmissionSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<FactIrSubmission> models = new ArrayList<FactIrSubmission>(soapModels.length);

		for (FactIrSubmissionSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.idetronic.eis.model.FactIrSubmission"));

	public FactIrSubmissionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _submissionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSubmissionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _submissionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FactIrSubmission.class;
	}

	@Override
	public String getModelClassName() {
		return FactIrSubmission.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("submissionId", getSubmissionId());
		attributes.put("libraryId", getLibraryId());
		attributes.put("facultyId", getFacultyId());
		attributes.put("period", getPeriod());
		attributes.put("itemMediumId", getItemMediumId());
		attributes.put("titleTotal", getTitleTotal());
		attributes.put("volumeTotal", getVolumeTotal());
		attributes.put("createdByUserId", getCreatedByUserId());
		attributes.put("createdByUserName", getCreatedByUserName());
		attributes.put("createdDate", getCreatedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long submissionId = (Long)attributes.get("submissionId");

		if (submissionId != null) {
			setSubmissionId(submissionId);
		}

		Long libraryId = (Long)attributes.get("libraryId");

		if (libraryId != null) {
			setLibraryId(libraryId);
		}

		Long facultyId = (Long)attributes.get("facultyId");

		if (facultyId != null) {
			setFacultyId(facultyId);
		}

		String period = (String)attributes.get("period");

		if (period != null) {
			setPeriod(period);
		}

		Long itemMediumId = (Long)attributes.get("itemMediumId");

		if (itemMediumId != null) {
			setItemMediumId(itemMediumId);
		}

		Integer titleTotal = (Integer)attributes.get("titleTotal");

		if (titleTotal != null) {
			setTitleTotal(titleTotal);
		}

		Integer volumeTotal = (Integer)attributes.get("volumeTotal");

		if (volumeTotal != null) {
			setVolumeTotal(volumeTotal);
		}

		Long createdByUserId = (Long)attributes.get("createdByUserId");

		if (createdByUserId != null) {
			setCreatedByUserId(createdByUserId);
		}

		String createdByUserName = (String)attributes.get("createdByUserName");

		if (createdByUserName != null) {
			setCreatedByUserName(createdByUserName);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}
	}

	@JSON
	@Override
	public long getSubmissionId() {
		return _submissionId;
	}

	@Override
	public void setSubmissionId(long submissionId) {
		_submissionId = submissionId;
	}

	@JSON
	@Override
	public long getLibraryId() {
		return _libraryId;
	}

	@Override
	public void setLibraryId(long libraryId) {
		_libraryId = libraryId;
	}

	@JSON
	@Override
	public long getFacultyId() {
		return _facultyId;
	}

	@Override
	public void setFacultyId(long facultyId) {
		_columnBitmask |= FACULTYID_COLUMN_BITMASK;

		if (!_setOriginalFacultyId) {
			_setOriginalFacultyId = true;

			_originalFacultyId = _facultyId;
		}

		_facultyId = facultyId;
	}

	public long getOriginalFacultyId() {
		return _originalFacultyId;
	}

	@JSON
	@Override
	public String getPeriod() {
		if (_period == null) {
			return StringPool.BLANK;
		}
		else {
			return _period;
		}
	}

	@Override
	public void setPeriod(String period) {
		_columnBitmask |= PERIOD_COLUMN_BITMASK;

		if (_originalPeriod == null) {
			_originalPeriod = _period;
		}

		_period = period;
	}

	public String getOriginalPeriod() {
		return GetterUtil.getString(_originalPeriod);
	}

	@JSON
	@Override
	public long getItemMediumId() {
		return _itemMediumId;
	}

	@Override
	public void setItemMediumId(long itemMediumId) {
		_itemMediumId = itemMediumId;
	}

	@JSON
	@Override
	public int getTitleTotal() {
		return _titleTotal;
	}

	@Override
	public void setTitleTotal(int titleTotal) {
		_titleTotal = titleTotal;
	}

	@JSON
	@Override
	public int getVolumeTotal() {
		return _volumeTotal;
	}

	@Override
	public void setVolumeTotal(int volumeTotal) {
		_volumeTotal = volumeTotal;
	}

	@JSON
	@Override
	public long getCreatedByUserId() {
		return _createdByUserId;
	}

	@Override
	public void setCreatedByUserId(long createdByUserId) {
		_createdByUserId = createdByUserId;
	}

	@Override
	public String getCreatedByUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getCreatedByUserId(), "uuid",
			_createdByUserUuid);
	}

	@Override
	public void setCreatedByUserUuid(String createdByUserUuid) {
		_createdByUserUuid = createdByUserUuid;
	}

	@JSON
	@Override
	public String getCreatedByUserName() {
		if (_createdByUserName == null) {
			return StringPool.BLANK;
		}
		else {
			return _createdByUserName;
		}
	}

	@Override
	public void setCreatedByUserName(String createdByUserName) {
		_createdByUserName = createdByUserName;
	}

	@JSON
	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			FactIrSubmission.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FactIrSubmission toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (FactIrSubmission)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FactIrSubmissionImpl factIrSubmissionImpl = new FactIrSubmissionImpl();

		factIrSubmissionImpl.setSubmissionId(getSubmissionId());
		factIrSubmissionImpl.setLibraryId(getLibraryId());
		factIrSubmissionImpl.setFacultyId(getFacultyId());
		factIrSubmissionImpl.setPeriod(getPeriod());
		factIrSubmissionImpl.setItemMediumId(getItemMediumId());
		factIrSubmissionImpl.setTitleTotal(getTitleTotal());
		factIrSubmissionImpl.setVolumeTotal(getVolumeTotal());
		factIrSubmissionImpl.setCreatedByUserId(getCreatedByUserId());
		factIrSubmissionImpl.setCreatedByUserName(getCreatedByUserName());
		factIrSubmissionImpl.setCreatedDate(getCreatedDate());

		factIrSubmissionImpl.resetOriginalValues();

		return factIrSubmissionImpl;
	}

	@Override
	public int compareTo(FactIrSubmission factIrSubmission) {
		long primaryKey = factIrSubmission.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof FactIrSubmission)) {
			return false;
		}

		FactIrSubmission factIrSubmission = (FactIrSubmission)obj;

		long primaryKey = factIrSubmission.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		FactIrSubmissionModelImpl factIrSubmissionModelImpl = this;

		factIrSubmissionModelImpl._originalFacultyId = factIrSubmissionModelImpl._facultyId;

		factIrSubmissionModelImpl._setOriginalFacultyId = false;

		factIrSubmissionModelImpl._originalPeriod = factIrSubmissionModelImpl._period;

		factIrSubmissionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<FactIrSubmission> toCacheModel() {
		FactIrSubmissionCacheModel factIrSubmissionCacheModel = new FactIrSubmissionCacheModel();

		factIrSubmissionCacheModel.submissionId = getSubmissionId();

		factIrSubmissionCacheModel.libraryId = getLibraryId();

		factIrSubmissionCacheModel.facultyId = getFacultyId();

		factIrSubmissionCacheModel.period = getPeriod();

		String period = factIrSubmissionCacheModel.period;

		if ((period != null) && (period.length() == 0)) {
			factIrSubmissionCacheModel.period = null;
		}

		factIrSubmissionCacheModel.itemMediumId = getItemMediumId();

		factIrSubmissionCacheModel.titleTotal = getTitleTotal();

		factIrSubmissionCacheModel.volumeTotal = getVolumeTotal();

		factIrSubmissionCacheModel.createdByUserId = getCreatedByUserId();

		factIrSubmissionCacheModel.createdByUserName = getCreatedByUserName();

		String createdByUserName = factIrSubmissionCacheModel.createdByUserName;

		if ((createdByUserName != null) && (createdByUserName.length() == 0)) {
			factIrSubmissionCacheModel.createdByUserName = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			factIrSubmissionCacheModel.createdDate = createdDate.getTime();
		}
		else {
			factIrSubmissionCacheModel.createdDate = Long.MIN_VALUE;
		}

		return factIrSubmissionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{submissionId=");
		sb.append(getSubmissionId());
		sb.append(", libraryId=");
		sb.append(getLibraryId());
		sb.append(", facultyId=");
		sb.append(getFacultyId());
		sb.append(", period=");
		sb.append(getPeriod());
		sb.append(", itemMediumId=");
		sb.append(getItemMediumId());
		sb.append(", titleTotal=");
		sb.append(getTitleTotal());
		sb.append(", volumeTotal=");
		sb.append(getVolumeTotal());
		sb.append(", createdByUserId=");
		sb.append(getCreatedByUserId());
		sb.append(", createdByUserName=");
		sb.append(getCreatedByUserName());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("com.idetronic.eis.model.FactIrSubmission");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>submissionId</column-name><column-value><![CDATA[");
		sb.append(getSubmissionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>libraryId</column-name><column-value><![CDATA[");
		sb.append(getLibraryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>facultyId</column-name><column-value><![CDATA[");
		sb.append(getFacultyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>period</column-name><column-value><![CDATA[");
		sb.append(getPeriod());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemMediumId</column-name><column-value><![CDATA[");
		sb.append(getItemMediumId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>titleTotal</column-name><column-value><![CDATA[");
		sb.append(getTitleTotal());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>volumeTotal</column-name><column-value><![CDATA[");
		sb.append(getVolumeTotal());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdByUserId</column-name><column-value><![CDATA[");
		sb.append(getCreatedByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdByUserName</column-name><column-value><![CDATA[");
		sb.append(getCreatedByUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = FactIrSubmission.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			FactIrSubmission.class
		};
	private long _submissionId;
	private long _libraryId;
	private long _facultyId;
	private long _originalFacultyId;
	private boolean _setOriginalFacultyId;
	private String _period;
	private String _originalPeriod;
	private long _itemMediumId;
	private int _titleTotal;
	private int _volumeTotal;
	private long _createdByUserId;
	private String _createdByUserUuid;
	private String _createdByUserName;
	private Date _createdDate;
	private long _columnBitmask;
	private FactIrSubmission _escapedModel;
}