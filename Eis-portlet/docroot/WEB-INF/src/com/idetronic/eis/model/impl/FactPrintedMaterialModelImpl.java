/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.idetronic.eis.model.impl;

import com.idetronic.eis.model.FactPrintedMaterial;
import com.idetronic.eis.model.FactPrintedMaterialModel;
import com.idetronic.eis.model.FactPrintedMaterialSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the FactPrintedMaterial service. Represents a row in the &quot;eis_FactPrintedMaterial&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.idetronic.eis.model.FactPrintedMaterialModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FactPrintedMaterialImpl}.
 * </p>
 *
 * @author Mazlan Mat
 * @see FactPrintedMaterialImpl
 * @see com.idetronic.eis.model.FactPrintedMaterial
 * @see com.idetronic.eis.model.FactPrintedMaterialModel
 * @generated
 */
@JSON(strict = true)
public class FactPrintedMaterialModelImpl extends BaseModelImpl<FactPrintedMaterial>
	implements FactPrintedMaterialModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a fact printed material model instance should use the {@link com.idetronic.eis.model.FactPrintedMaterial} interface instead.
	 */
	public static final String TABLE_NAME = "eis_FactPrintedMaterial";
	public static final Object[][] TABLE_COLUMNS = {
			{ "factPrintedMaterialId", Types.BIGINT },
			{ "libraryId", Types.BIGINT },
			{ "libraryCode", Types.VARCHAR },
			{ "stateId", Types.BIGINT },
			{ "stateCode", Types.VARCHAR },
			{ "itemTypeId", Types.BIGINT },
			{ "period", Types.VARCHAR },
			{ "libraryTypeId", Types.BIGINT },
			{ "monthVal", Types.INTEGER },
			{ "yearVal", Types.INTEGER },
			{ "titleTotal", Types.INTEGER },
			{ "volumeTotal", Types.INTEGER },
			{ "dateCreated", Types.TIMESTAMP },
			{ "createdByUserName", Types.VARCHAR },
			{ "createdByUserId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table eis_FactPrintedMaterial (factPrintedMaterialId LONG not null primary key,libraryId LONG,libraryCode VARCHAR(10) null,stateId LONG,stateCode VARCHAR(10) null,itemTypeId LONG,period VARCHAR(10) null,libraryTypeId LONG,monthVal INTEGER,yearVal INTEGER,titleTotal INTEGER,volumeTotal INTEGER,dateCreated DATE null,createdByUserName VARCHAR(75) null,createdByUserId LONG)";
	public static final String TABLE_SQL_DROP = "drop table eis_FactPrintedMaterial";
	public static final String ORDER_BY_JPQL = " ORDER BY factPrintedMaterial.factPrintedMaterialId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY eis_FactPrintedMaterial.factPrintedMaterialId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.idetronic.eis.model.FactPrintedMaterial"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.idetronic.eis.model.FactPrintedMaterial"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.idetronic.eis.model.FactPrintedMaterial"),
			true);
	public static long LIBRARYID_COLUMN_BITMASK = 1L;
	public static long PERIOD_COLUMN_BITMASK = 2L;
	public static long FACTPRINTEDMATERIALID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static FactPrintedMaterial toModel(FactPrintedMaterialSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		FactPrintedMaterial model = new FactPrintedMaterialImpl();

		model.setFactPrintedMaterialId(soapModel.getFactPrintedMaterialId());
		model.setLibraryId(soapModel.getLibraryId());
		model.setLibraryCode(soapModel.getLibraryCode());
		model.setStateId(soapModel.getStateId());
		model.setStateCode(soapModel.getStateCode());
		model.setItemTypeId(soapModel.getItemTypeId());
		model.setPeriod(soapModel.getPeriod());
		model.setLibraryTypeId(soapModel.getLibraryTypeId());
		model.setMonthVal(soapModel.getMonthVal());
		model.setYearVal(soapModel.getYearVal());
		model.setTitleTotal(soapModel.getTitleTotal());
		model.setVolumeTotal(soapModel.getVolumeTotal());
		model.setDateCreated(soapModel.getDateCreated());
		model.setCreatedByUserName(soapModel.getCreatedByUserName());
		model.setCreatedByUserId(soapModel.getCreatedByUserId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<FactPrintedMaterial> toModels(
		FactPrintedMaterialSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<FactPrintedMaterial> models = new ArrayList<FactPrintedMaterial>(soapModels.length);

		for (FactPrintedMaterialSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.idetronic.eis.model.FactPrintedMaterial"));

	public FactPrintedMaterialModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _factPrintedMaterialId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFactPrintedMaterialId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _factPrintedMaterialId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FactPrintedMaterial.class;
	}

	@Override
	public String getModelClassName() {
		return FactPrintedMaterial.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("factPrintedMaterialId", getFactPrintedMaterialId());
		attributes.put("libraryId", getLibraryId());
		attributes.put("libraryCode", getLibraryCode());
		attributes.put("stateId", getStateId());
		attributes.put("stateCode", getStateCode());
		attributes.put("itemTypeId", getItemTypeId());
		attributes.put("period", getPeriod());
		attributes.put("libraryTypeId", getLibraryTypeId());
		attributes.put("monthVal", getMonthVal());
		attributes.put("yearVal", getYearVal());
		attributes.put("titleTotal", getTitleTotal());
		attributes.put("volumeTotal", getVolumeTotal());
		attributes.put("dateCreated", getDateCreated());
		attributes.put("createdByUserName", getCreatedByUserName());
		attributes.put("createdByUserId", getCreatedByUserId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long factPrintedMaterialId = (Long)attributes.get(
				"factPrintedMaterialId");

		if (factPrintedMaterialId != null) {
			setFactPrintedMaterialId(factPrintedMaterialId);
		}

		Long libraryId = (Long)attributes.get("libraryId");

		if (libraryId != null) {
			setLibraryId(libraryId);
		}

		String libraryCode = (String)attributes.get("libraryCode");

		if (libraryCode != null) {
			setLibraryCode(libraryCode);
		}

		Long stateId = (Long)attributes.get("stateId");

		if (stateId != null) {
			setStateId(stateId);
		}

		String stateCode = (String)attributes.get("stateCode");

		if (stateCode != null) {
			setStateCode(stateCode);
		}

		Long itemTypeId = (Long)attributes.get("itemTypeId");

		if (itemTypeId != null) {
			setItemTypeId(itemTypeId);
		}

		String period = (String)attributes.get("period");

		if (period != null) {
			setPeriod(period);
		}

		Long libraryTypeId = (Long)attributes.get("libraryTypeId");

		if (libraryTypeId != null) {
			setLibraryTypeId(libraryTypeId);
		}

		Integer monthVal = (Integer)attributes.get("monthVal");

		if (monthVal != null) {
			setMonthVal(monthVal);
		}

		Integer yearVal = (Integer)attributes.get("yearVal");

		if (yearVal != null) {
			setYearVal(yearVal);
		}

		Integer titleTotal = (Integer)attributes.get("titleTotal");

		if (titleTotal != null) {
			setTitleTotal(titleTotal);
		}

		Integer volumeTotal = (Integer)attributes.get("volumeTotal");

		if (volumeTotal != null) {
			setVolumeTotal(volumeTotal);
		}

		Date dateCreated = (Date)attributes.get("dateCreated");

		if (dateCreated != null) {
			setDateCreated(dateCreated);
		}

		String createdByUserName = (String)attributes.get("createdByUserName");

		if (createdByUserName != null) {
			setCreatedByUserName(createdByUserName);
		}

		Long createdByUserId = (Long)attributes.get("createdByUserId");

		if (createdByUserId != null) {
			setCreatedByUserId(createdByUserId);
		}
	}

	@JSON
	@Override
	public long getFactPrintedMaterialId() {
		return _factPrintedMaterialId;
	}

	@Override
	public void setFactPrintedMaterialId(long factPrintedMaterialId) {
		_factPrintedMaterialId = factPrintedMaterialId;
	}

	@JSON
	@Override
	public long getLibraryId() {
		return _libraryId;
	}

	@Override
	public void setLibraryId(long libraryId) {
		_columnBitmask |= LIBRARYID_COLUMN_BITMASK;

		if (!_setOriginalLibraryId) {
			_setOriginalLibraryId = true;

			_originalLibraryId = _libraryId;
		}

		_libraryId = libraryId;
	}

	public long getOriginalLibraryId() {
		return _originalLibraryId;
	}

	@JSON
	@Override
	public String getLibraryCode() {
		if (_libraryCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _libraryCode;
		}
	}

	@Override
	public void setLibraryCode(String libraryCode) {
		_libraryCode = libraryCode;
	}

	@JSON
	@Override
	public long getStateId() {
		return _stateId;
	}

	@Override
	public void setStateId(long stateId) {
		_stateId = stateId;
	}

	@JSON
	@Override
	public String getStateCode() {
		if (_stateCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _stateCode;
		}
	}

	@Override
	public void setStateCode(String stateCode) {
		_stateCode = stateCode;
	}

	@JSON
	@Override
	public long getItemTypeId() {
		return _itemTypeId;
	}

	@Override
	public void setItemTypeId(long itemTypeId) {
		_itemTypeId = itemTypeId;
	}

	@JSON
	@Override
	public String getPeriod() {
		if (_period == null) {
			return StringPool.BLANK;
		}
		else {
			return _period;
		}
	}

	@Override
	public void setPeriod(String period) {
		_columnBitmask |= PERIOD_COLUMN_BITMASK;

		if (_originalPeriod == null) {
			_originalPeriod = _period;
		}

		_period = period;
	}

	public String getOriginalPeriod() {
		return GetterUtil.getString(_originalPeriod);
	}

	@JSON
	@Override
	public long getLibraryTypeId() {
		return _libraryTypeId;
	}

	@Override
	public void setLibraryTypeId(long libraryTypeId) {
		_libraryTypeId = libraryTypeId;
	}

	@JSON
	@Override
	public int getMonthVal() {
		return _monthVal;
	}

	@Override
	public void setMonthVal(int monthVal) {
		_monthVal = monthVal;
	}

	@JSON
	@Override
	public int getYearVal() {
		return _yearVal;
	}

	@Override
	public void setYearVal(int yearVal) {
		_yearVal = yearVal;
	}

	@JSON
	@Override
	public int getTitleTotal() {
		return _titleTotal;
	}

	@Override
	public void setTitleTotal(int titleTotal) {
		_titleTotal = titleTotal;
	}

	@JSON
	@Override
	public int getVolumeTotal() {
		return _volumeTotal;
	}

	@Override
	public void setVolumeTotal(int volumeTotal) {
		_volumeTotal = volumeTotal;
	}

	@JSON
	@Override
	public Date getDateCreated() {
		return _dateCreated;
	}

	@Override
	public void setDateCreated(Date dateCreated) {
		_dateCreated = dateCreated;
	}

	@JSON
	@Override
	public String getCreatedByUserName() {
		if (_createdByUserName == null) {
			return StringPool.BLANK;
		}
		else {
			return _createdByUserName;
		}
	}

	@Override
	public void setCreatedByUserName(String createdByUserName) {
		_createdByUserName = createdByUserName;
	}

	@JSON
	@Override
	public long getCreatedByUserId() {
		return _createdByUserId;
	}

	@Override
	public void setCreatedByUserId(long createdByUserId) {
		_createdByUserId = createdByUserId;
	}

	@Override
	public String getCreatedByUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getCreatedByUserId(), "uuid",
			_createdByUserUuid);
	}

	@Override
	public void setCreatedByUserUuid(String createdByUserUuid) {
		_createdByUserUuid = createdByUserUuid;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			FactPrintedMaterial.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FactPrintedMaterial toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (FactPrintedMaterial)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FactPrintedMaterialImpl factPrintedMaterialImpl = new FactPrintedMaterialImpl();

		factPrintedMaterialImpl.setFactPrintedMaterialId(getFactPrintedMaterialId());
		factPrintedMaterialImpl.setLibraryId(getLibraryId());
		factPrintedMaterialImpl.setLibraryCode(getLibraryCode());
		factPrintedMaterialImpl.setStateId(getStateId());
		factPrintedMaterialImpl.setStateCode(getStateCode());
		factPrintedMaterialImpl.setItemTypeId(getItemTypeId());
		factPrintedMaterialImpl.setPeriod(getPeriod());
		factPrintedMaterialImpl.setLibraryTypeId(getLibraryTypeId());
		factPrintedMaterialImpl.setMonthVal(getMonthVal());
		factPrintedMaterialImpl.setYearVal(getYearVal());
		factPrintedMaterialImpl.setTitleTotal(getTitleTotal());
		factPrintedMaterialImpl.setVolumeTotal(getVolumeTotal());
		factPrintedMaterialImpl.setDateCreated(getDateCreated());
		factPrintedMaterialImpl.setCreatedByUserName(getCreatedByUserName());
		factPrintedMaterialImpl.setCreatedByUserId(getCreatedByUserId());

		factPrintedMaterialImpl.resetOriginalValues();

		return factPrintedMaterialImpl;
	}

	@Override
	public int compareTo(FactPrintedMaterial factPrintedMaterial) {
		long primaryKey = factPrintedMaterial.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof FactPrintedMaterial)) {
			return false;
		}

		FactPrintedMaterial factPrintedMaterial = (FactPrintedMaterial)obj;

		long primaryKey = factPrintedMaterial.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		FactPrintedMaterialModelImpl factPrintedMaterialModelImpl = this;

		factPrintedMaterialModelImpl._originalLibraryId = factPrintedMaterialModelImpl._libraryId;

		factPrintedMaterialModelImpl._setOriginalLibraryId = false;

		factPrintedMaterialModelImpl._originalPeriod = factPrintedMaterialModelImpl._period;

		factPrintedMaterialModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<FactPrintedMaterial> toCacheModel() {
		FactPrintedMaterialCacheModel factPrintedMaterialCacheModel = new FactPrintedMaterialCacheModel();

		factPrintedMaterialCacheModel.factPrintedMaterialId = getFactPrintedMaterialId();

		factPrintedMaterialCacheModel.libraryId = getLibraryId();

		factPrintedMaterialCacheModel.libraryCode = getLibraryCode();

		String libraryCode = factPrintedMaterialCacheModel.libraryCode;

		if ((libraryCode != null) && (libraryCode.length() == 0)) {
			factPrintedMaterialCacheModel.libraryCode = null;
		}

		factPrintedMaterialCacheModel.stateId = getStateId();

		factPrintedMaterialCacheModel.stateCode = getStateCode();

		String stateCode = factPrintedMaterialCacheModel.stateCode;

		if ((stateCode != null) && (stateCode.length() == 0)) {
			factPrintedMaterialCacheModel.stateCode = null;
		}

		factPrintedMaterialCacheModel.itemTypeId = getItemTypeId();

		factPrintedMaterialCacheModel.period = getPeriod();

		String period = factPrintedMaterialCacheModel.period;

		if ((period != null) && (period.length() == 0)) {
			factPrintedMaterialCacheModel.period = null;
		}

		factPrintedMaterialCacheModel.libraryTypeId = getLibraryTypeId();

		factPrintedMaterialCacheModel.monthVal = getMonthVal();

		factPrintedMaterialCacheModel.yearVal = getYearVal();

		factPrintedMaterialCacheModel.titleTotal = getTitleTotal();

		factPrintedMaterialCacheModel.volumeTotal = getVolumeTotal();

		Date dateCreated = getDateCreated();

		if (dateCreated != null) {
			factPrintedMaterialCacheModel.dateCreated = dateCreated.getTime();
		}
		else {
			factPrintedMaterialCacheModel.dateCreated = Long.MIN_VALUE;
		}

		factPrintedMaterialCacheModel.createdByUserName = getCreatedByUserName();

		String createdByUserName = factPrintedMaterialCacheModel.createdByUserName;

		if ((createdByUserName != null) && (createdByUserName.length() == 0)) {
			factPrintedMaterialCacheModel.createdByUserName = null;
		}

		factPrintedMaterialCacheModel.createdByUserId = getCreatedByUserId();

		return factPrintedMaterialCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(31);

		sb.append("{factPrintedMaterialId=");
		sb.append(getFactPrintedMaterialId());
		sb.append(", libraryId=");
		sb.append(getLibraryId());
		sb.append(", libraryCode=");
		sb.append(getLibraryCode());
		sb.append(", stateId=");
		sb.append(getStateId());
		sb.append(", stateCode=");
		sb.append(getStateCode());
		sb.append(", itemTypeId=");
		sb.append(getItemTypeId());
		sb.append(", period=");
		sb.append(getPeriod());
		sb.append(", libraryTypeId=");
		sb.append(getLibraryTypeId());
		sb.append(", monthVal=");
		sb.append(getMonthVal());
		sb.append(", yearVal=");
		sb.append(getYearVal());
		sb.append(", titleTotal=");
		sb.append(getTitleTotal());
		sb.append(", volumeTotal=");
		sb.append(getVolumeTotal());
		sb.append(", dateCreated=");
		sb.append(getDateCreated());
		sb.append(", createdByUserName=");
		sb.append(getCreatedByUserName());
		sb.append(", createdByUserId=");
		sb.append(getCreatedByUserId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(49);

		sb.append("<model><model-name>");
		sb.append("com.idetronic.eis.model.FactPrintedMaterial");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>factPrintedMaterialId</column-name><column-value><![CDATA[");
		sb.append(getFactPrintedMaterialId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>libraryId</column-name><column-value><![CDATA[");
		sb.append(getLibraryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>libraryCode</column-name><column-value><![CDATA[");
		sb.append(getLibraryCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stateId</column-name><column-value><![CDATA[");
		sb.append(getStateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stateCode</column-name><column-value><![CDATA[");
		sb.append(getStateCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemTypeId</column-name><column-value><![CDATA[");
		sb.append(getItemTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>period</column-name><column-value><![CDATA[");
		sb.append(getPeriod());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>libraryTypeId</column-name><column-value><![CDATA[");
		sb.append(getLibraryTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>monthVal</column-name><column-value><![CDATA[");
		sb.append(getMonthVal());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>yearVal</column-name><column-value><![CDATA[");
		sb.append(getYearVal());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>titleTotal</column-name><column-value><![CDATA[");
		sb.append(getTitleTotal());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>volumeTotal</column-name><column-value><![CDATA[");
		sb.append(getVolumeTotal());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dateCreated</column-name><column-value><![CDATA[");
		sb.append(getDateCreated());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdByUserName</column-name><column-value><![CDATA[");
		sb.append(getCreatedByUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdByUserId</column-name><column-value><![CDATA[");
		sb.append(getCreatedByUserId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = FactPrintedMaterial.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			FactPrintedMaterial.class
		};
	private long _factPrintedMaterialId;
	private long _libraryId;
	private long _originalLibraryId;
	private boolean _setOriginalLibraryId;
	private String _libraryCode;
	private long _stateId;
	private String _stateCode;
	private long _itemTypeId;
	private String _period;
	private String _originalPeriod;
	private long _libraryTypeId;
	private int _monthVal;
	private int _yearVal;
	private int _titleTotal;
	private int _volumeTotal;
	private Date _dateCreated;
	private String _createdByUserName;
	private long _createdByUserId;
	private String _createdByUserUuid;
	private long _columnBitmask;
	private FactPrintedMaterial _escapedModel;
}