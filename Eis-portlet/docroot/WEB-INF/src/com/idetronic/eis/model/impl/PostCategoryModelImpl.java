/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.idetronic.eis.model.impl;

import com.idetronic.eis.model.PostCategory;
import com.idetronic.eis.model.PostCategoryModel;
import com.idetronic.eis.model.PostCategorySoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the PostCategory service. Represents a row in the &quot;eis_PostCategory&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.idetronic.eis.model.PostCategoryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PostCategoryImpl}.
 * </p>
 *
 * @author Mazlan Mat
 * @see PostCategoryImpl
 * @see com.idetronic.eis.model.PostCategory
 * @see com.idetronic.eis.model.PostCategoryModel
 * @generated
 */
@JSON(strict = true)
public class PostCategoryModelImpl extends BaseModelImpl<PostCategory>
	implements PostCategoryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a post category model instance should use the {@link com.idetronic.eis.model.PostCategory} interface instead.
	 */
	public static final String TABLE_NAME = "eis_PostCategory";
	public static final Object[][] TABLE_COLUMNS = {
			{ "postCategoryId", Types.BIGINT },
			{ "postCategoryCode", Types.VARCHAR },
			{ "postCategoryName", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table eis_PostCategory (postCategoryId LONG not null primary key,postCategoryCode VARCHAR(15) null,postCategoryName VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table eis_PostCategory";
	public static final String ORDER_BY_JPQL = " ORDER BY postCategory.postCategoryId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY eis_PostCategory.postCategoryId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.idetronic.eis.model.PostCategory"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.idetronic.eis.model.PostCategory"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.idetronic.eis.model.PostCategory"),
			true);
	public static long POSTCATEGORYCODE_COLUMN_BITMASK = 1L;
	public static long POSTCATEGORYID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static PostCategory toModel(PostCategorySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		PostCategory model = new PostCategoryImpl();

		model.setPostCategoryId(soapModel.getPostCategoryId());
		model.setPostCategoryCode(soapModel.getPostCategoryCode());
		model.setPostCategoryName(soapModel.getPostCategoryName());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<PostCategory> toModels(PostCategorySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<PostCategory> models = new ArrayList<PostCategory>(soapModels.length);

		for (PostCategorySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.idetronic.eis.model.PostCategory"));

	public PostCategoryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _postCategoryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPostCategoryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _postCategoryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PostCategory.class;
	}

	@Override
	public String getModelClassName() {
		return PostCategory.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("postCategoryId", getPostCategoryId());
		attributes.put("postCategoryCode", getPostCategoryCode());
		attributes.put("postCategoryName", getPostCategoryName());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long postCategoryId = (Long)attributes.get("postCategoryId");

		if (postCategoryId != null) {
			setPostCategoryId(postCategoryId);
		}

		String postCategoryCode = (String)attributes.get("postCategoryCode");

		if (postCategoryCode != null) {
			setPostCategoryCode(postCategoryCode);
		}

		String postCategoryName = (String)attributes.get("postCategoryName");

		if (postCategoryName != null) {
			setPostCategoryName(postCategoryName);
		}
	}

	@JSON
	@Override
	public long getPostCategoryId() {
		return _postCategoryId;
	}

	@Override
	public void setPostCategoryId(long postCategoryId) {
		_postCategoryId = postCategoryId;
	}

	@JSON
	@Override
	public String getPostCategoryCode() {
		if (_postCategoryCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _postCategoryCode;
		}
	}

	@Override
	public void setPostCategoryCode(String postCategoryCode) {
		_columnBitmask |= POSTCATEGORYCODE_COLUMN_BITMASK;

		if (_originalPostCategoryCode == null) {
			_originalPostCategoryCode = _postCategoryCode;
		}

		_postCategoryCode = postCategoryCode;
	}

	public String getOriginalPostCategoryCode() {
		return GetterUtil.getString(_originalPostCategoryCode);
	}

	@JSON
	@Override
	public String getPostCategoryName() {
		if (_postCategoryName == null) {
			return StringPool.BLANK;
		}
		else {
			return _postCategoryName;
		}
	}

	@Override
	public void setPostCategoryName(String postCategoryName) {
		_postCategoryName = postCategoryName;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			PostCategory.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PostCategory toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (PostCategory)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PostCategoryImpl postCategoryImpl = new PostCategoryImpl();

		postCategoryImpl.setPostCategoryId(getPostCategoryId());
		postCategoryImpl.setPostCategoryCode(getPostCategoryCode());
		postCategoryImpl.setPostCategoryName(getPostCategoryName());

		postCategoryImpl.resetOriginalValues();

		return postCategoryImpl;
	}

	@Override
	public int compareTo(PostCategory postCategory) {
		long primaryKey = postCategory.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof PostCategory)) {
			return false;
		}

		PostCategory postCategory = (PostCategory)obj;

		long primaryKey = postCategory.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		PostCategoryModelImpl postCategoryModelImpl = this;

		postCategoryModelImpl._originalPostCategoryCode = postCategoryModelImpl._postCategoryCode;

		postCategoryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<PostCategory> toCacheModel() {
		PostCategoryCacheModel postCategoryCacheModel = new PostCategoryCacheModel();

		postCategoryCacheModel.postCategoryId = getPostCategoryId();

		postCategoryCacheModel.postCategoryCode = getPostCategoryCode();

		String postCategoryCode = postCategoryCacheModel.postCategoryCode;

		if ((postCategoryCode != null) && (postCategoryCode.length() == 0)) {
			postCategoryCacheModel.postCategoryCode = null;
		}

		postCategoryCacheModel.postCategoryName = getPostCategoryName();

		String postCategoryName = postCategoryCacheModel.postCategoryName;

		if ((postCategoryName != null) && (postCategoryName.length() == 0)) {
			postCategoryCacheModel.postCategoryName = null;
		}

		return postCategoryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{postCategoryId=");
		sb.append(getPostCategoryId());
		sb.append(", postCategoryCode=");
		sb.append(getPostCategoryCode());
		sb.append(", postCategoryName=");
		sb.append(getPostCategoryName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.idetronic.eis.model.PostCategory");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>postCategoryId</column-name><column-value><![CDATA[");
		sb.append(getPostCategoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>postCategoryCode</column-name><column-value><![CDATA[");
		sb.append(getPostCategoryCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>postCategoryName</column-name><column-value><![CDATA[");
		sb.append(getPostCategoryName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = PostCategory.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			PostCategory.class
		};
	private long _postCategoryId;
	private String _postCategoryCode;
	private String _originalPostCategoryCode;
	private String _postCategoryName;
	private long _columnBitmask;
	private PostCategory _escapedModel;
}