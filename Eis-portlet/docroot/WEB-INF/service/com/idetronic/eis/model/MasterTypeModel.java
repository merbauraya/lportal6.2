/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.idetronic.eis.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

/**
 * The base model interface for the MasterType service. Represents a row in the &quot;eis_MasterType&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link com.idetronic.eis.model.impl.MasterTypeModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.idetronic.eis.model.impl.MasterTypeImpl}.
 * </p>
 *
 * @author Mazlan Mat
 * @see MasterType
 * @see com.idetronic.eis.model.impl.MasterTypeImpl
 * @see com.idetronic.eis.model.impl.MasterTypeModelImpl
 * @generated
 */
public interface MasterTypeModel extends BaseModel<MasterType> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a master type model instance should use the {@link MasterType} interface instead.
	 */

	/**
	 * Returns the primary key of this master type.
	 *
	 * @return the primary key of this master type
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this master type.
	 *
	 * @param primaryKey the primary key of this master type
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the master type ID of this master type.
	 *
	 * @return the master type ID of this master type
	 */
	public long getMasterTypeId();

	/**
	 * Sets the master type ID of this master type.
	 *
	 * @param masterTypeId the master type ID of this master type
	 */
	public void setMasterTypeId(long masterTypeId);

	/**
	 * Returns the master type name of this master type.
	 *
	 * @return the master type name of this master type
	 */
	@AutoEscape
	public String getMasterTypeName();

	/**
	 * Sets the master type name of this master type.
	 *
	 * @param masterTypeName the master type name of this master type
	 */
	public void setMasterTypeName(String masterTypeName);

	/**
	 * Returns the status of this master type.
	 *
	 * @return the status of this master type
	 */
	public int getStatus();

	/**
	 * Sets the status of this master type.
	 *
	 * @param status the status of this master type
	 */
	public void setStatus(int status);

	/**
	 * Returns the parent type of this master type.
	 *
	 * @return the parent type of this master type
	 */
	public boolean getParentType();

	/**
	 * Returns <code>true</code> if this master type is parent type.
	 *
	 * @return <code>true</code> if this master type is parent type; <code>false</code> otherwise
	 */
	public boolean isParentType();

	/**
	 * Sets whether this master type is parent type.
	 *
	 * @param parentType the parent type of this master type
	 */
	public void setParentType(boolean parentType);

	/**
	 * Returns the page label of this master type.
	 *
	 * @return the page label of this master type
	 */
	@AutoEscape
	public String getPageLabel();

	/**
	 * Sets the page label of this master type.
	 *
	 * @param pageLabel the page label of this master type
	 */
	public void setPageLabel(String pageLabel);

	/**
	 * Returns the name label of this master type.
	 *
	 * @return the name label of this master type
	 */
	@AutoEscape
	public String getNameLabel();

	/**
	 * Sets the name label of this master type.
	 *
	 * @param nameLabel the name label of this master type
	 */
	public void setNameLabel(String nameLabel);

	/**
	 * Returns the has parent1 of this master type.
	 *
	 * @return the has parent1 of this master type
	 */
	public boolean getHasParent1();

	/**
	 * Returns <code>true</code> if this master type is has parent1.
	 *
	 * @return <code>true</code> if this master type is has parent1; <code>false</code> otherwise
	 */
	public boolean isHasParent1();

	/**
	 * Sets whether this master type is has parent1.
	 *
	 * @param hasParent1 the has parent1 of this master type
	 */
	public void setHasParent1(boolean hasParent1);

	/**
	 * Returns the parent id1 of this master type.
	 *
	 * @return the parent id1 of this master type
	 */
	public long getParentId1();

	/**
	 * Sets the parent id1 of this master type.
	 *
	 * @param parentId1 the parent id1 of this master type
	 */
	public void setParentId1(long parentId1);

	/**
	 * Returns the parent id2 of this master type.
	 *
	 * @return the parent id2 of this master type
	 */
	public long getParentId2();

	/**
	 * Sets the parent id2 of this master type.
	 *
	 * @param parentId2 the parent id2 of this master type
	 */
	public void setParentId2(long parentId2);

	/**
	 * Returns the has parent2 of this master type.
	 *
	 * @return the has parent2 of this master type
	 */
	public boolean getHasParent2();

	/**
	 * Returns <code>true</code> if this master type is has parent2.
	 *
	 * @return <code>true</code> if this master type is has parent2; <code>false</code> otherwise
	 */
	public boolean isHasParent2();

	/**
	 * Sets whether this master type is has parent2.
	 *
	 * @param hasParent2 the has parent2 of this master type
	 */
	public void setHasParent2(boolean hasParent2);

	/**
	 * Returns the parent1 label of this master type.
	 *
	 * @return the parent1 label of this master type
	 */
	@AutoEscape
	public String getParent1Label();

	/**
	 * Sets the parent1 label of this master type.
	 *
	 * @param parent1Label the parent1 label of this master type
	 */
	public void setParent1Label(String parent1Label);

	/**
	 * Returns the parent2 label of this master type.
	 *
	 * @return the parent2 label of this master type
	 */
	@AutoEscape
	public String getParent2Label();

	/**
	 * Sets the parent2 label of this master type.
	 *
	 * @param parent2Label the parent2 label of this master type
	 */
	public void setParent2Label(String parent2Label);

	/**
	 * Returns the has status1 of this master type.
	 *
	 * @return the has status1 of this master type
	 */
	public boolean getHasStatus1();

	/**
	 * Returns <code>true</code> if this master type is has status1.
	 *
	 * @return <code>true</code> if this master type is has status1; <code>false</code> otherwise
	 */
	public boolean isHasStatus1();

	/**
	 * Sets whether this master type is has status1.
	 *
	 * @param hasStatus1 the has status1 of this master type
	 */
	public void setHasStatus1(boolean hasStatus1);

	/**
	 * Returns the has status2 of this master type.
	 *
	 * @return the has status2 of this master type
	 */
	public boolean getHasStatus2();

	/**
	 * Returns <code>true</code> if this master type is has status2.
	 *
	 * @return <code>true</code> if this master type is has status2; <code>false</code> otherwise
	 */
	public boolean isHasStatus2();

	/**
	 * Sets whether this master type is has status2.
	 *
	 * @param hasStatus2 the has status2 of this master type
	 */
	public void setHasStatus2(boolean hasStatus2);

	/**
	 * Returns the has status3 of this master type.
	 *
	 * @return the has status3 of this master type
	 */
	public boolean getHasStatus3();

	/**
	 * Returns <code>true</code> if this master type is has status3.
	 *
	 * @return <code>true</code> if this master type is has status3; <code>false</code> otherwise
	 */
	public boolean isHasStatus3();

	/**
	 * Sets whether this master type is has status3.
	 *
	 * @param hasStatus3 the has status3 of this master type
	 */
	public void setHasStatus3(boolean hasStatus3);

	/**
	 * Returns the has status4 of this master type.
	 *
	 * @return the has status4 of this master type
	 */
	public boolean getHasStatus4();

	/**
	 * Returns <code>true</code> if this master type is has status4.
	 *
	 * @return <code>true</code> if this master type is has status4; <code>false</code> otherwise
	 */
	public boolean isHasStatus4();

	/**
	 * Sets whether this master type is has status4.
	 *
	 * @param hasStatus4 the has status4 of this master type
	 */
	public void setHasStatus4(boolean hasStatus4);

	/**
	 * Returns the status1 label of this master type.
	 *
	 * @return the status1 label of this master type
	 */
	@AutoEscape
	public String getStatus1Label();

	/**
	 * Sets the status1 label of this master type.
	 *
	 * @param status1Label the status1 label of this master type
	 */
	public void setStatus1Label(String status1Label);

	/**
	 * Returns the status2 label of this master type.
	 *
	 * @return the status2 label of this master type
	 */
	@AutoEscape
	public String getStatus2Label();

	/**
	 * Sets the status2 label of this master type.
	 *
	 * @param status2Label the status2 label of this master type
	 */
	public void setStatus2Label(String status2Label);

	/**
	 * Returns the status3 label of this master type.
	 *
	 * @return the status3 label of this master type
	 */
	@AutoEscape
	public String getStatus3Label();

	/**
	 * Sets the status3 label of this master type.
	 *
	 * @param status3Label the status3 label of this master type
	 */
	public void setStatus3Label(String status3Label);

	/**
	 * Returns the status4 label of this master type.
	 *
	 * @return the status4 label of this master type
	 */
	@AutoEscape
	public String getStatus4Label();

	/**
	 * Sets the status4 label of this master type.
	 *
	 * @param status4Label the status4 label of this master type
	 */
	public void setStatus4Label(String status4Label);

	/**
	 * Returns the has code of this master type.
	 *
	 * @return the has code of this master type
	 */
	public boolean getHasCode();

	/**
	 * Returns <code>true</code> if this master type is has code.
	 *
	 * @return <code>true</code> if this master type is has code; <code>false</code> otherwise
	 */
	public boolean isHasCode();

	/**
	 * Sets whether this master type is has code.
	 *
	 * @param hasCode the has code of this master type
	 */
	public void setHasCode(boolean hasCode);

	/**
	 * Returns the code label of this master type.
	 *
	 * @return the code label of this master type
	 */
	@AutoEscape
	public String getCodeLabel();

	/**
	 * Sets the code label of this master type.
	 *
	 * @param codeLabel the code label of this master type
	 */
	public void setCodeLabel(String codeLabel);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	@Override
	public Object clone();

	@Override
	public int compareTo(com.idetronic.eis.model.MasterType masterType);

	@Override
	public int hashCode();

	@Override
	public CacheModel<com.idetronic.eis.model.MasterType> toCacheModel();

	@Override
	public com.idetronic.eis.model.MasterType toEscapedModel();

	@Override
	public com.idetronic.eis.model.MasterType toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}